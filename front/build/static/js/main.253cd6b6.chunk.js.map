{"version":3,"sources":["store/reducer/server-reducer.js","store/reducer/user-reducer.js","store/reducer/index.js","store/index.js","components/Home/index.jsx","components/Music/index.jsx","components/Video/index.jsx","components/VideoPlayer/index.js","components/VideoDetail/index.jsx","components/ServerIsDown/index.jsx","components/Authentificator/index.jsx","components/Administration/index.jsx","components/VideoAdmin/index.jsx","components/SeriesAdmin/index.jsx","components/Users/index.jsx","components/Series/index.jsx","components/Navigation/index.jsx","components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","isStart","serverReducer","state","action","type","value","isConnect","name","role","userReducer","parseInt","rootReducer","combineReducers","server","user","store","createStore","Home","props","levelAccess","this","userRole","className","to","Component","connect","console","log","dispatch","apiUrl","process","audio","Music","activeRandomSong","randomSong","setState","reloadSong","reloadAlbum","activeReloadSong","activeReloadAlbum","playNextSong","currentTime","play","max","Math","floor","listOfSongs","length","randomIndexSong","random","getStream","indexOfActualSong","indexOf","songTitle","nextSongName","getAllFolders","axios","get","then","response","listOfFolders","data","catch","error","getAllSongs","repertorySongs","repertoryImg","changePlayerState","playerStatus","pause","fastBackward","fastForward","songIsCharged","duration","source","showMusicFolder","openFolder","isFirstSongOfAlbulm","getAlbumImg","prevProps","prevState","onended","responseType","base64","btoa","Uint8Array","reduce","byte","String","fromCharCode","selectedTrack","Audio","ontimeupdate","getCurrentTime","selectedFolder","time","isNaN","slice","getDuration","map","item","i","key","onClick","icon","disabled","backward","size","forward","scroll","Scroll","Video","getVideos","loadVideosSpinner","listOfVideos","titleOfVideos","test","filmDetail","push","title","toLowerCase","getLastTen","getCategorys","handleSearchFilmChange","e","scrollToTop","idTarget","target","searchFilm","showCategory","result","Fuse","includeScore","keys","search","searchVideoResults","searchActive","deleteSearch","sort","sortByDate","index","video","a","b","Date","created_at","sciFiGenre","forEach","genres_name","includes","fantasyGenre","horrorGenre","searchInlistOfVideos","content","src","poster_path","alt","overview","substr","vote_average","style","backgroundImage","getSciFi","getFantasy","getHorror","searchVideos","withoutControls","width","slidesToShow","slidesToScroll","spin","id","autoComplete","onChange","placeholder","VideoPlayer","componentDidMount","document","getElementById","componentDidUpdate","onplay","isPlay","onpause","componentWillUnmount","pauseVideo","convertSeconds","seconds","sec_num","hours","minutes","playVideo","refs","vidRef","removeAttribute","load","toggleFullScreen","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","render","autoPlay","controls","ref","mediaTitle","React","VideoDetail","getVideoInfo","filmTitle","date","toLocaleDateString","media_name","selectVideo","videoIsPlay","location","pathname","split","release_date","withRouter","ServerIsDown","getServerStatus","setTimeout","Authentificator","handleIdChange","handlePasswordChange","passwordTarget","password","handleSubmit","event","preventDefault","startSpinner","post","identifiant","Cookies","set","expires","connexionError","validId","validPassword","passwordHidden","htmlFor","Administration","selectPage","API_TOKEN","refresh","getMedia","medias","verified_by_admin","selectedMedia","handleFilmTitleChange","filmTitleTarget","searchOnTmdb","searchResults","showResults","statusMessage","url","results","genre_ids","searchStatusMessageError","tmdbGenres","genres","selectedFilm","selectedFilmGenres","selectedFilmGenresNames","genre","validSelectedFilm","film","statusMessageColor","undefined","mediasName","color","height","autocomplete","allowFullScreen","content-type","SeriesAdmin","Users","handleRoleChange","roleTarget","getUsers","users","selectUserToDelete","handleSubmitDeleteUser","delete","userDeleteMessage","userDeleteColor","usersName","Series","getSeries","listOfSeries","serie_name","seasons","Navigation","serverIsDown","path","VideoAdmin","component","App","library","add","faPlay","faStop","faFastForward","faFastBackward","faPause","faChevronLeft","faRetweet","faRandom","faForward","faBackward","faChromecast","faEye","faEyeSlash","faSpinner","faTimesCircle","faCompress","faTv","faUpload","faHome","Boolean","window","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.253cd6b6.chunk.js","sourcesContent":["const initialState = {\n    isStart: false,\n}\n\nfunction serverReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'SERVER_IS_START':\n            nextState = {\n                ...state,\n                isStart: action.value\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default serverReducer","const initialState = {\n    isConnect: false,\n    name: null,\n    role: null\n}\n\nfunction userReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'SAVE_USER':\n            var role = parseInt(action.value.role);\n            nextState = {\n                ...state,\n                isConnect: true,\n                name: action.value.name,\n                role: role\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default userReducer","import { combineReducers } from 'redux';\nimport server from './server-reducer';\nimport user from './user-reducer';\n\nconst rootReducer = combineReducers({\n    server,\n    user\n});\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './reducer';\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Link\n} from \"react-router-dom\";\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    render() {\n\n\n        let levelAccess;\n        if (this.props.userRole === 3) {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/video\">\n                        <span >Films</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/series\">\n                        <span >Séries</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span >Musiques</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/admin\">\n                        <span >Administration</span>\n                    </Link>\n\n                </div>\n        } else if (this.props.userRole === 2) {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/video\">\n                        <span >Vidéos</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/series\">\n                        <span >Séries</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span >Musiques</span>\n                    </Link>\n                </div>\n        }\n        else {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/video\">\n                        <span >Vidéos</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/series\">\n                        <span >Séries</span>\n                    </Link>\n                </div>\n        }\n        return (\n            <div className=\"home\">\n                <div className=\"home__links\">\n                    {levelAccess}\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state)\n    return {\n        userRole: state.user.role,\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\n// import defaultCover from '../../ressources/images/default-cover.jpg';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nlet audio = null;\n\nclass Music extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedTrack: null,\n            listOfSongs: [],\n            playerStatus: \"stopped\",\n            songIsCharged: false,\n            currentTime: \"0:00\",\n            duration: \"0:00\",\n            songTitle: '',\n            source: null,\n            showMusicFolder: true,\n            listOfFolders: [],\n            openFolder: null,\n            reloadAlbum: false,\n            reloadSong: false,\n            randomSong: false,\n            isFirstSongOfAlbulm: false\n        };\n    }\n    componentDidMount() {\n        // Get all music folders\n        this.getAllFolders();\n        // Get the image album\n        this.getAlbumImg()\n        // Get all songs list\n        // this.getAllSongs();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        // TODO gérer le passage à la chanson suivante en fin de la précédente\n        if (this.state.songIsCharged) {\n            audio.onended = () => {\n                this.playNextSong();\n            }\n        }\n    }\n\n    // TODO Gérer le retour sur la home quand une musique est jouée (musique continue mais controle broken)\n\n    activeRandomSong = () => {\n        if (this.state.randomSong) {\n            this.setState({ randomSong: false });\n        } else {\n            this.setState({ randomSong: true, reloadSong: false, reloadAlbum: false });\n        }\n    }\n\n    activeReloadSong = () => {\n        if (this.state.reloadSong) {\n            this.setState({ reloadSong: false });\n        } else {\n            this.setState({ reloadSong: true, reloadAlbum: false, randomSong: false });\n        }\n    }\n\n    activeReloadAlbum = () => {\n        if (this.state.reloadAlbum) {\n            this.setState({ reloadAlbum: false });\n        } else {\n            this.setState({ reloadAlbum: true, reloadSong: false, randomSong: false });\n        }\n    }\n\n    playNextSong = () => {\n        // Si le reload de la chanson en cours est activé\n        if (this.state.reloadSong) {\n            // On remet le compteur à zéro\n            audio.currentTime = 0\n            audio.play()\n        } else if (this.state.randomSong) {\n            var max = Math.floor(this.state.listOfSongs.length - 1);\n            var randomIndexSong = Math.floor(Math.random() * (max - 0)) + 0;\n            this.getStream(this.state.listOfSongs[randomIndexSong]);\n        } else {\n            // Récupérer lindex de la chanson actuelle dans listOfSongs\n            var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n            var nextSongName = this.state.listOfSongs[indexOfActualSong + 1];\n\n            // Stopper si c'est la derniére chanson de la liste\n            var countOfIndex = this.state.listOfSongs.length - 1;\n            if (indexOfActualSong + 1 <= countOfIndex) {\n                // Envoyer la chanson suivante\n                this.getStream(nextSongName);\n            }\n            // Todo revenir à la premiére chanson si activé\n            else if (this.state.reloadAlbum) {\n                // On envoie le titre de la premiére chanson de l'album\n                this.getStream(this.state.listOfSongs[0]);\n            }\n        }\n\n    }\n\n    // Get album Img^^\n    getAlbumImg() {\n        axios.get(\n            apiUrl + 'img/',\n            { responseType: 'arraybuffer' },\n        )\n            .then(response => {\n                const base64 = btoa(\n                    new Uint8Array(response.data).reduce(\n                        (data, byte) => data + String.fromCharCode(byte),\n                        '',\n                    ),\n                );\n                this.setState({ source: \"data:;base64,\" + base64 });\n            });\n    }\n\n    getStream(selectedTrack) {\n        if (this.state.songIsCharged) {\n            audio.pause() //Stop the former song\n        }\n\n        this.setState({ songIsCharged: true, songTitle: selectedTrack, playerStatus: 'playing' });\n\n        audio = new Audio(apiUrl + 'play/' + this.state.openFolder + '/' + selectedTrack);\n        audio.play();\n        audio.ontimeupdate = () => {\n            this.getCurrentTime()\n        }\n\n    }\n\n    openFolder(selectedFolder) {\n        axios.get(apiUrl + 'get-folder-songs/' + selectedFolder\n        )\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    listOfSongs: response.data.repertorySongs,\n                    repertoryImg: response.data.repertoryImg,\n                    showMusicFolder: false,\n                    openFolder: selectedFolder\n                })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    getAllFolders = () => {\n        axios.get(apiUrl + 'music/folder'\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ listOfFolders: response.data })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    getAllSongs = () => {\n        axios.get(apiUrl + 'get-all-songs/'\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ listOfSongs: response.data.repertorySongs, repertoryImg: response.data.repertoryImg })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    // Play / Pause \n    changePlayerState = () => {\n        if (this.state.playerStatus === \"paused\") {\n            audio.play();\n            this.setState({ playerStatus: 'playing' })\n        } else {\n            audio.pause();\n            this.setState({ playerStatus: 'paused' })\n        }\n    }\n\n    backward() {\n        audio.currentTime = audio.currentTime - 10;\n    }\n\n    forward() {\n        audio.currentTime = audio.currentTime + 10;\n    }\n\n    fastBackward = () => {\n        // Récupérer lindex de la chanson actuelle dans listOfSongs\n        var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n        var nextSongName = this.state.listOfSongs[indexOfActualSong - 1];\n\n        // Stopper si c'est la derniére chanson de la liste\n        if (indexOfActualSong - 1 >= 0) {\n            // Envoyer la chanson suivante\n            this.getStream(nextSongName);\n        }\n    }\n\n    fastForward = () => {\n        // Récupérer lindex de la chanson actuelle dans listOfSongs\n        var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n        var nextSongName = this.state.listOfSongs[indexOfActualSong + 1];\n\n        // Stopper si c'est la derniére chanson de la liste\n        var countOfIndex = this.state.listOfSongs.length - 1;\n        if (indexOfActualSong + 1 <= countOfIndex) {\n            // Envoyer la chanson suivante\n            this.getStream(nextSongName);\n        }\n        // Todo revenir à la premiére chanson si activé\n        else {\n            // On envoie le titre de la premiére chanson de l'album\n            this.getStream(this.state.listOfSongs[0]);\n        }\n    }\n\n    // OKK\n    getTime(time) {\n        if (!isNaN(time)) {\n            return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2)\n        }\n    }\n\n    // OKK\n    getCurrentTime() {\n        if (this.state.songIsCharged === true) {\n            var currentTime = Math.floor(audio.currentTime / 60) + ':' + ('0' + Math.floor(audio.currentTime % 60)).slice(-2)\n            this.setState({ currentTime: currentTime })\n\n\n\n            // TODO A deplacer\n            // Définit si c'est la premiére chanson de la liste\n            if (this.state.listOfSongs.indexOf(this.state.songTitle) === 0) {\n                this.setState({ isFirstSongOfAlbulm: true });\n            } else {\n                this.setState({ isFirstSongOfAlbulm: false });\n            }\n        }\n    }\n\n    // OKK\n    getDuration() {\n        if (this.state.songIsCharged === true) {\n            let duration = Math.floor(audio.duration / 60) + ':' + ('0' + Math.floor(audio.duration % 60)).slice(-2);\n            if (isNaN(audio.duration)) {\n                return \"\"\n            } else {\n                return duration;\n            }\n        }\n    }\n\n    render() {\n        const openFolder = this.state.openFolder;\n        const songTitle = this.state.songTitle;\n        // const songImg = this.state.source;\n        const currentTime = this.state.currentTime;\n        const duration = this.getDuration();\n        const listOfFolders = this.state.listOfFolders.map((item, i) => {\n            return (\n                <div\n                    className=\"music__folder__folder-title\"\n                    key={i}\n                    onClick={() => this.openFolder(item)}>\n                    <span>{item}</span>\n                </div>\n            );\n        });\n        const listOfSongs = this.state.listOfSongs.map((item, i) => {\n            return (\n                <div\n                    className=\"music__list__song-title\"\n                    key={i}\n                    onClick={() => this.getStream(item)}\n                >\n                    <span>{item}</span>\n\n                </div>\n            )\n        });\n\n        return (\n            <div className=\"music\">\n                {this.state.showMusicFolder ? (\n                    <div className=\"music__folder\">\n                        {/* TODO Ajouter titre */}\n                        {listOfFolders}\n                    </div>\n                ) : (\n                        <div className=\"music__list\">\n                            {/* TODO Ajouter titre */}\n                            {listOfSongs}\n                        </div>\n                    )}\n                <div className=\"music__player\">\n                    <div className=\"music__player__song-information\">\n                        <div className=\"music__player__song-information__content\">\n                            <span className=\"music__player__song-information__content__song-title\">{songTitle}</span>\n                            <span className=\"music__player__song-information__content__album-title\">{openFolder}</span>\n                        </div>\n                    </div>\n                    <div className=\"music__player__timer\">\n                        {this.state.playerStatus === \"playing\" || this.state.playerStatus === \"paused\" ? (\n                            <div className=\"music__player__timer__currentime\">\n                                <span>\n                                    {currentTime} / {duration}\n                                </span>\n                            </div>\n                        ) : (\n                                <div className=\"music__player__timer__currentime\">\n                                    <span>\n                                        0:00 / 0:00\n                                </span>\n                                </div>\n                            )}\n                        <div className=\"music__player__timer__song-options\">\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.randomSong ? 'isCheck' : '')} onClick={this.activeRandomSong}>\n                                <FontAwesomeIcon\n                                    icon=\"random\"\n                                />\n                            </button>\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.reloadSong ? 'isCheck' : '')} onClick={this.activeReloadSong}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__timer__song-options__reload-button__reload-song-span\">1</span>\n                            </button>\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.reloadAlbum ? 'isCheck' : '')} onClick={this.activeReloadAlbum}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__timer__song-options__reload-button__reload-song-span\">all</span>\n                            </button>\n                            <button className={\"music__player__timer__song-options__cast-button \"} onClick={() => this.setState({ showMusicFolder: true })}>\n                                <FontAwesomeIcon\n                                    icon={['fab', 'chromecast']}\n                                />\n                            </button>\n                        </div>\n                    </div>\n\n\n                    <div className=\"music__player__control\">\n                        <div className=\"music__player__control__buttons\">\n                            {this.state.isFirstSongOfAlbulm\n                                ? <button disabled className=\"music__player__control__buttons__button music__player__control__button__back isDisabled\" onClick={this.fastBackward}>\n                                    <FontAwesomeIcon\n                                        icon=\"fast-backward\"\n                                    />\n                                </button>\n                                : <button className=\"music__player__control__buttons__button music__player__control__button__back\" onClick={this.fastBackward}>\n                                    <FontAwesomeIcon\n                                        icon=\"fast-backward\"\n                                    />\n                                </button>\n                            }\n                            <button className=\"music__player__control__buttons__button music__player__control__button__back\" onClick={this.backward}>\n                                <FontAwesomeIcon\n                                    icon=\"backward\"\n                                />\n                            </button>\n                            {this.state.playerStatus === \"stopped\" || this.state.playerStatus === \"paused\"\n                                ? <button className=\"music__player__control__buttons__button\" onClick={this.changePlayerState}>\n                                    <FontAwesomeIcon\n                                        icon=\"play\"\n                                        size=\"1x\"\n                                    />\n                                </button>\n                                : <button className=\"music__player__control__buttons__button\" onClick={this.changePlayerState}>\n                                    <FontAwesomeIcon\n                                        icon=\"pause\"\n                                        size=\"1x\"\n                                    />\n                                </button>\n                            }\n\n                            <button className=\"music__player__control__buttons__button music__player__control__button__next\" onClick={this.forward}>\n                                <FontAwesomeIcon\n                                    icon=\"forward\"\n                                />\n                            </button>\n                            <button className=\"music__player__control__buttons__button music__player__control__button__next\" onClick={this.fastForward}>\n                                <FontAwesomeIcon\n                                    icon=\"fast-forward\"\n                                />\n                            </button>\n                            {/* <button className=\"music__player__control__button\" onClick={() => this.setState({ playerStatus: \"stopped\" })}>\n                            <FontAwesomeIcon\n                                icon=\"stop\"\n                            />\n                        </button> */}\n                        </div>\n\n                        {/* <div className=\"music__player__control__song-options\">\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.randomSong ? 'isCheck' : '')} onClick={this.activeRandomSong}>\n                                <FontAwesomeIcon\n                                    icon=\"random\"\n                                />\n                            </button>\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.reloadSong ? 'isCheck' : '')} onClick={this.activeReloadSong}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__control__song-options__reload-button__reload-song-span\">1</span>\n                            </button>\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.reloadAlbum ? 'isCheck' : '')} onClick={this.activeReloadAlbum}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__control__song-options__reload-button__reload-song-span\">all</span>\n                            </button>\n                        </div> */}\n\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isStart: state.home.isStart,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Music);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport * as Scroll from 'react-scroll';\nimport Fuse from 'fuse.js';\nimport Carousel from 'nuka-carousel';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst apiUrl = process.env.REACT_APP_REST_API;\nlet scroll = Scroll.animateScroll;\n\nclass Video extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listOfVideos: [],\n            searchInlistOfVideos: [],\n            titleOfVideos: [],\n            searchVideoResults: [],\n            searchActive: false,\n            loadVideosSpinner: false,\n            showCategory: true,\n            getLastTen: [],\n            sciFiGenre: [],\n            fantasyGenre: [],\n            horrorGenre: []\n        };\n    }\n\n    componentDidMount() {\n        // Get all videos\n        this.getVideos();\n    }\n\n    componentDidUpdate() {\n    }\n\n\n    getVideos = () => {\n        this.setState({ loadVideosSpinner: true })\n        axios.get(apiUrl + 'all-films'\n        )\n            .then(response => {\n                let listOfVideos = this.state.listOfVideos\n\n\n                let titleOfVideos = this.state.titleOfVideos\n                let test = []\n                response.data.map((item, i) => {\n                    let filmDetail = item;\n                    listOfVideos.push(filmDetail);\n\n                    test = {\n                        'key': item.title.toLowerCase(),\n                        'value': item.title,\n                    }\n\n\n                    titleOfVideos.push(test);\n\n                    this.setState({ listOfVideos: listOfVideos, titleOfVideos: titleOfVideos, loadVideosSpinner: false })\n                })\n                this.getLastTen();\n                this.getCategorys();\n            })\n            .catch(error => {\n                this.setState({ loadVideosSpinner: false })\n            });\n    }\n\n    handleSearchFilmChange = (e) => {\n        scroll.scrollToTop();\n        let idTarget = e.target.value;\n        this.setState({ searchFilm: idTarget, showCategory: false });\n\n        if (idTarget.length > 0) {\n            const options = {\n                includeScore: true,\n                keys: ['title']\n            }\n            const fuse = new Fuse(this.state.listOfVideos, options)\n            const result = fuse.search(idTarget)\n            this.setState({ searchVideoResults: result, searchActive: true })\n\n        } else {\n            this.setState({ searchActive: false })\n\n        }\n\n    }\n\n    deleteSearch = () => {\n        this.setState({ searchVideoResults: [], searchActive: false, searchFilm: '' })\n    }\n\n    showCategory = () => {\n        this.setState({ showCategory: true, searchFilm: '' })\n    }\n\n    getLastTen = () => {\n        let listOfVideos = this.state.listOfVideos;\n\n        listOfVideos = listOfVideos.sort(this.sortByDate);\n\n        const getLastTen = []\n        for (let index = 0; index < 10; index++) {\n            const video = listOfVideos[index];\n            getLastTen.push(video)\n\n        }\n        this.setState({ getLastTen: getLastTen })\n    }\n\n    sortByDate = (a, b) => {\n        var da = new Date(a.created_at);\n        var db = new Date(b.created_at);\n        return (da > db) ? 1 : -1;\n    }\n\n    getCategorys = () => {\n        let listOfVideos = this.state.listOfVideos;\n        console.log(listOfVideos)\n\n        let sciFiGenre = [];\n        listOfVideos.forEach((video) => {\n            if (video.genres_name.includes('Science-Fiction')) {\n                sciFiGenre.push(video)\n            }\n        });\n\n        let fantasyGenre = [];\n        listOfVideos.forEach((video) => {\n            if (video.genres_name.includes('Fantastique')) {\n                fantasyGenre.push(video)\n            }\n        });\n\n        let horrorGenre = [];\n        listOfVideos.forEach((video) => {\n            if (video.genres_name.includes('Horreur')) {\n                horrorGenre.push(video)\n            }\n        });\n\n        this.setState({ sciFiGenre: sciFiGenre, fantasyGenre: fantasyGenre, horrorGenre: horrorGenre })\n    }\n\n    render() {\n        const listOfVideos = this.state.listOfVideos.map((item, i) => {\n            return (\n                <Link className=\"video__content__video-info\" to={'/video-detail/' + item.title} key={i}>\n                    < img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                    <div className=\"video__content__video-info__text\">\n                        <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                        <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                        <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                    </div>\n                </Link >\n            );\n        });\n\n        const getLastTen = this.state.getLastTen.map((item, i) => {\n            return (\n                <Link className=\"video__category__container__link\" to={'/video-detail/' + item.title} key={i} style={{ backgroundImage: \"url(\" + item.poster_path + \")\" }}>\n                </Link >\n            );\n        });\n\n        const getSciFi = this.state.sciFiGenre.map((item, i) => {\n            return (\n                <Link className=\"video__category__container__link\" to={'/video-detail/' + item.title} key={i} style={{ backgroundImage: \"url(\" + item.poster_path + \")\" }}>\n                </Link >\n            );\n        });\n\n        const getFantasy = this.state.fantasyGenre.map((item, i) => {\n            return (\n                <Link className=\"video__category__container__link\" to={'/video-detail/' + item.title} key={i} style={{ backgroundImage: \"url(\" + item.poster_path + \")\" }}>\n                </Link >\n            );\n        });\n\n        const getHorror = this.state.horrorGenre.map((item, i) => {\n            return (\n                <Link className=\"video__category__container__link\" to={'/video-detail/' + item.title} key={i} style={{ backgroundImage: \"url(\" + item.poster_path + \")\" }}>\n                </Link >\n            );\n        });\n\n        const searchVideos = this.state.searchVideoResults.map((item, i) => {\n            return (\n                <Link className=\"video__content__video-info\" to={'/video-detail/' + item.item.title} key={i}>\n                    < img src={item.item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                    <div className=\"video__content__video-info__text\">\n                        <span className=\"video__content__video-info__text__title\">{item.item.title}</span>\n                        <p className=\"video__content__video-info__text__overview\">{item.item.overview.substr(0, 250)}</p>\n                        <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.item.vote_average} / 10</span>\n                    </div>\n                </Link >\n            );\n        });\n\n        let content;\n        if (!this.state.showCategory) {\n            content =\n                <div className=\"video\">\n                    {this.state.loadVideosSpinner\n                        ?\n                        <div className=\"video__loader\">\n                            <FontAwesomeIcon\n                                icon=\"spinner\"\n                                spin\n                                size=\"2x\"\n                            />\n                        </div>\n                        :\n                        <div className=\"video__content\">\n                            {this.state.searchActive\n                                ?\n                                <div className=\"video__content__display\">\n                                    {searchVideos}\n                                </div>\n                                :\n                                <div className=\"video__content__display\">\n                                    {listOfVideos}\n                                </div>\n                            }\n                        </div>\n\n                    }\n\n\n\n                </div>\n        } else {\n            content =\n                <div className=\"video__category\">\n                    <div className=\"video__category__container\">\n                        <h2>Derniers ajoutés</h2>\n                        <Carousel\n                            withoutControls\n                            width=\"100%\"\n                            slidesToShow={3.5}\n                            slidesToScroll=\"auto\"\n                        >\n                            {getLastTen}\n                        </Carousel>\n                    </div>\n                    <div className=\"video__category__container\">\n                        <h2>Science Fiction</h2>\n                        <Carousel\n                            withoutControls\n                            width=\"100%\"\n                            slidesToShow={3.5}\n                            slidesToScroll=\"auto\"\n                        >\n                            {getSciFi}\n                        </Carousel>\n                    </div>\n                    <div className=\"video__category__container\">\n                        <h2>Fantastique</h2>\n                        <Carousel\n                            withoutControls\n                            width=\"100%\"\n                            slidesToShow={3.5}\n                            slidesToScroll=\"auto\"\n                        >\n                            {getFantasy}\n                        </Carousel>\n                    </div>\n                    <div className=\"video__category__container\">\n                        <h2>Horreur</h2>\n                        <Carousel\n                            withoutControls\n                            width=\"100%\"\n                            slidesToShow={3.5}\n                            slidesToScroll=\"auto\"\n                        >\n                            {getHorror}\n                        </Carousel>\n                    </div>\n                </div>\n        }\n\n        return (\n            <div className=\"video\">\n                {content}\n                <div className=\"video__searchbar\">\n                    <div className='video__searchbar__opacity'>\n                    </div>\n                    <div className='video__searchbar__content'>\n                        {!this.state.showCategory &&\n                            <button className='video__searchbar__content__show-category' onClick={this.showCategory}>\n                                <FontAwesomeIcon\n                                    icon=\"home\"\n                                    size=\"1x\"\n                                />\n                            </button>\n                        }\n                        <div className='video__searchbar__content__input'>\n                            <input type=\"text\" id=\"InputId\" autoComplete=\"off\" value={this.state.searchFilm} onChange={this.handleSearchFilmChange} placeholder=\"Rechercher un film\">\n                            </input>\n\n                            {this.state.searchActive &&\n                                <button className='video__searchbar__content__input__delete' onClick={this.deleteSearch}>\n                                    <FontAwesomeIcon\n                                        icon=\"times-circle\"\n                                        size=\"1x\"\n                                    />\n                                </button>\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\n\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass VideoPlayer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            video: null,\n            isPlay: true,\n            duration: \"0:00\",\n            currentTime: \"0:00\"\n        };\n    }\n    componentDidMount = () => {\n        this.setState({ video: document.getElementById('video-player') })\n\n    };\n\n    componentDidUpdate = () => {\n        // Event\n        this.state.video.ontimeupdate = () => {\n            this.getCurrentTime()\n            this.getDuration()\n        }\n        this.state.video.onplay = () => {\n            console.log('hey')\n            this.setState({ isPlay: true })\n        }\n        this.state.video.onpause = () => {\n            console.log('pause')\n            this.setState({ isPlay: false })\n        }\n    }\n\n    componentWillUnmount = () => {\n        this.pauseVideo();\n    };\n\n    getCurrentTime = () => {\n        let currentTime = this.convertSeconds(this.state.video.currentTime)\n        this.setState({ currentTime: currentTime })\n    }\n\n    getDuration() {\n        let duration = this.convertSeconds(this.state.video.duration)\n        // let duration = Math.floor(this.state.video.duration / 60) + ':' + ('0' + Math.floor(this.state.video.duration % 60)).slice(-2);\n        this.setState({ duration: duration })\n    }\n\n    convertSeconds = (seconds) => {\n        var sec_num = parseInt(seconds, 10); // don't forget the second param\n        var hours = Math.floor(sec_num / 3600);\n        var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n        var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n        if (hours < 10) { hours = \"0\" + hours; }\n        if (minutes < 10) { minutes = \"0\" + minutes; }\n        if (seconds < 10) { seconds = \"0\" + seconds; }\n        return hours + ':' + minutes + ':' + seconds;\n    }\n\n    playVideo = () => {\n        this.refs.vidRef.play();\n        this.setState({ isPlay: true })\n    };\n\n    pauseVideo = () => {\n        if (this.refs.vidRef) {\n            // Pause as well\n            this.refs.vidRef.pause();\n            this.refs.vidRef.removeAttribute('src'); // empty source\n            this.refs.vidRef.load();\n            this.setState({ isPlay: false })\n        }\n    };\n\n    toggleFullScreen = () => {\n        if (this.refs.vidRef.requestFullscreen) {\n            this.refs.vidRef.requestFullscreen();\n        } else if (this.refs.vidRef.msRequestFullscreen) {\n            this.refs.vidRef.msRequestFullscreen();\n        } else if (this.refs.vidRef.mozRequestFullScreen) {\n            this.refs.vidRef.mozRequestFullScreen();\n        } else if (this.refs.vidRef.webkitRequestFullscreen) {\n            this.refs.vidRef.webkitRequestFullscreen();\n        }\n    };\n\n    render = () => {\n        return (\n            <div className=\"video-player\">\n                <video\n                    id='video-player'\n                    autoPlay\n                    controls\n                    className=\"video-player__screen\"\n                    ref=\"vidRef\"\n                    src={this.props.mediaTitle}\n                    type=\"video/mp4\"\n                />\n                <div className=\"video-player__controls\">\n                    {this.state.isPlay\n                        ?\n                        <button onClick={this.pauseVideo} className=\"video-player__controls__buttons\">\n                            <FontAwesomeIcon\n                                icon=\"pause\"\n                                size=\"1x\"\n                            />\n                        </button>\n                        :\n                        <button onClick={this.playVideo} className=\"video-player__controls__buttons\">\n                            <FontAwesomeIcon\n                                icon=\"play\"\n                                size=\"1x\"\n                            />\n                        </button>\n                    }\n\n                    <div className=\"video-player__controls__currentime\">\n                        <span>\n                            {this.state.currentTime} / {this.state.duration}\n                        </span>\n                    </div>\n                    <button onClick={this.toggleFullScreen} className=\"video-player__controls__buttons\">\n                        <FontAwesomeIcon\n                            icon=\"compress\"\n                            size=\"1x\"\n                        />\n                    </button>\n                </div>\n\n\n\n            </div>\n        );\n    };\n}\n\nexport default VideoPlayer;\n","import React, { Component, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport VideoPlayer from '../VideoPlayer';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass VideoDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectVideo: null,\n            videoIsPlay: false\n        };\n    }\n\n    componentDidMount() {\n        const filmTitle = this.props.location.pathname.split('/')[2]\n        this.getVideoInfo(filmTitle);\n    }\n\n    componentDidUpdate() {\n    }\n\n\n\n    getVideoInfo = (filmTitle) => {\n        axios.get(apiUrl + 'one-film/' + filmTitle\n        )\n            .then(response => {\n                let date = new Date;\n                date = date.toLocaleDateString()\n                let filmDetail = {\n                    'title': response.data.title,\n                    'overview': response.data.overview,\n                    'poster_path': response.data.poster_path,\n                    'vote_average': response.data.vote_average,\n                    'media_name': response.data.media_name,\n                    'release_date': date\n                }\n                // selectVideo.push(filmDetail)\n                this.setState({ selectVideo: filmDetail })\n            })\n            .catch(error => {\n            });\n    }\n\n    render() {\n        const item = this.state.selectVideo;\n        return (\n            <div className=\"video-detail\">\n                {item &&\n                    <div className=\"video-detail__content\">\n                        <img src={item.poster_path} alt=\"film-poster\" className=\"video-detail__content__img\" />\n                        <div className=\"video-detail__content__text\">\n                            <h2 className=\"video-detail__content__text__title\">{item.title}</h2>\n                            <p className=\"video-detail__content__text__overview\">{item.overview}</p>\n                            <span className=\"video-detail__content__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                            <span className=\"video-detail__content__text__vote\">Sortie: {item.release_date}</span>\n                        </div>\n                        <div className=\"video-detail__player\">\n                            <VideoPlayer mediaTitle={apiUrl + \"video/\" + item.media_name} />\n                        </div>\n                    </div >\n                }\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isStart: state.home.isStart,\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(VideoDetail));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass ServerIsDown extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ServerIsDown: false\n        };\n    }\n\n    componentDidMount() {\n        this.getServerStatus();\n    }\n\n    componentDidUpdate() {\n        console.log('navigation')\n        // this.getServerStatus();\n    }\n\n    getServerStatus = () => {\n        setTimeout(() => {\n            axios.get(apiUrl + 'start'\n            )\n                .then(response => {\n                    const action = { type: \"SERVER_IS_START\", value: true }\n                    this.props.dispatch(action)\n                    this.getServerStatus()\n                })\n                .catch(error => {\n                    const action = { type: \"SERVER_IS_START\", value: false }\n                    this.props.dispatch(action)\n                    this.getServerStatus()\n                });\n        }, 3000);\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"server-down\">\n                <div className=\"server-down__content\">\n                    <h2 className=\"server-down__content__title\">Le serveur est actuellement en maintenance</h2>\n                    <p className=\"server-down__content__message\">Veuillez contacter l'administrateur du site ou réessayer plus tard</p>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isStart: state.home.isStart,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ServerIsDown);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Authentificator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            password: '',\n            validId: null,\n            validPassword: null,\n            connexionError: false,\n            passwordHidden: true,\n            startSpinner: false,\n\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleIdChange = (e) => {\n        let idTarget = e.target.value;\n        this.setState({ id: idTarget });\n    }\n\n    handlePasswordChange = (e) => {\n        let passwordTarget = e.target.value;\n        this.setState({ password: passwordTarget });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.setState({ startSpinner: true });\n        axios.post(apiUrl + 'login', {\n            identifiant: this.state.id,\n            password: this.state.password\n        })\n            .then(response => {\n                console.log(response)\n                const action = { type: \"SAVE_USER\", value: response.data }\n                Cookies.set('name', response.data.name, { expires: 30 })\n                Cookies.set('role', parseInt(response.data.role), { expires: 30 })\n                this.props.dispatch(action)\n                this.setState({ startSpinner: false });\n                // this.setState({ loadSpinner: false, redirectToAccount: true });\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ connexionError: true, startSpinner: false });\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"connexion\">\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Connexion requise pour accéder à nos différents services</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <input type=\"text\" id=\"InputId\" value={this.state.id} onChange={this.handleIdChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Mot de Passe\n                            </label>\n                            <div className=\"connexion__content__form__formgroup__password__content\">\n                                <input type={this.state.passwordHidden ? \"password\" : \"text\"} className=\"\" value={this.state.password} onChange={this.handlePasswordChange} />\n                                {this.state.passwordHidden\n                                    ?\n                                    <span className=\"connexion__content__form__formgroup__password__content__toggle\" onClick={() => this.setState({ passwordHidden: false })}><FontAwesomeIcon icon=\"eye\" size=\"1x\" /></span>\n                                    :\n                                    <span className=\"connexion__content__form__formgroup__password__content__toggle\" onClick={() => this.setState({ passwordHidden: true })}><FontAwesomeIcon icon=\"eye-slash\" size=\"1x\" /></span>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"connexion__content__form__submit__button\" onClick={this.handleSubmit}>\n                                {!this.state.startSpinner\n                                    ? <span>\n                                        Connexion\n                                    </span>\n\n                                    : <FontAwesomeIcon\n                                        icon=\"spinner\"\n                                        spin\n                                        size=\"1x\"\n                                    />\n                                }\n                            </button>\n\n\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.connexionError &&\n                                <p>Identifiants invalides, veuillez réessayer</p>\n                            }\n                        </div>\n                    </form>\n                    <p className=\"connexion__content__message\">Si vous avez perdu votre identifiant ou votre mot de passe. Contacter l'administrateur, aucun mot de passe ou identifiant ne sera envoyé par courriel</p>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Authentificator);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nclass Administration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectPage: 0,\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    // handleIdChange = (e) => {\n    //     let idTarget = e.target.value;\n    //     this.setState({ id: idTarget });\n    // }\n\n    render() {\n        return (\n            <div className=\"admin\">\n                <Link className=\"admin__link\" to=\"/admin/users\">\n                    <span>Gestion Utilisateurs</span>\n                </Link>\n                <Link className=\"admin__link\" to=\"/admin/videos\">\n                    <span>Gestion Films</span>\n                </Link>\n                <Link className=\"admin__link\" to=\"/admin/series\">\n                    <span>Gestion Séries</span>\n                </Link>\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\nconst API_TOKEN = process.env.REACT_APP_TMDB_API_TOKEN;\n\nclass Administration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filmTitle: '',\n            searchResults: [],\n            selectedFilm: undefined,\n            showResults: true,\n            medias: [],\n            selectedMedia: undefined,\n            statusMessage: false,\n            statusMessageColor: undefined,\n            searchStatusMessageError: false,\n            tmdbGenres: undefined\n        };\n    }\n\n    componentDidMount() {\n        this.getMedia();\n    }\n\n    componentDidUpdate() {\n    }\n\n    refresh = (event) => {\n        axios.get(apiUrl + 'check-films'\n        )\n            .then(response => {\n                console.log(response)\n                this.getMedia()\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    getMedia = () => {\n        this.setState({ medias: [] })\n        axios.get(apiUrl + 'admin-all-films'\n        )\n            .then(response => {\n                response.data.map((item, i) => {\n                    let filmDetail = {\n                        'media_name': item.media_name,\n                        'verified_by_admin': item.verified_by_admin\n                    }\n\n                    let medias = this.state.medias;\n                    medias.push(filmDetail)\n                    this.setState({ medias: medias, selectedMedia: response.data[0].media_name })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    selectedMedia = (event) => {\n        this.setState({ selectedMedia: event.target.value, filmTitle: event.target.value });\n    }\n\n    handleFilmTitleChange = (e) => {\n        let filmTitleTarget = e.target.value;\n        this.setState({ filmTitle: filmTitleTarget });\n    }\n\n    searchOnTmdb = (event) => {\n        event.preventDefault();\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], showResults: true, statusMessage: false })\n        const filmTitle = this.state.filmTitle;\n        const url = 'https://api.themoviedb.org/3/search/movie?api_key=' + API_TOKEN + '&language=fr&query=' + filmTitle\n        axios.get(url)\n            .then(response => {\n                console.log(response)\n                response.data.results.map((item, i) => {\n                    let filmDetail = {\n                        'index': i,\n                        'genre_ids': item.genre_ids,\n                        'title': item.title,\n                        'overview': item.overview,\n                        'poster_path': \"https://image.tmdb.org/t/p/w300\" + item.poster_path,\n                        'vote_average': item.vote_average,\n                        'release_date': item.release_date,\n                    }\n\n                    let searchResults = this.state.searchResults\n\n                    searchResults.push(filmDetail)\n                    this.setState({ searchResults: searchResults, searchStatusMessageError: false })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ searchStatusMessageError: true })\n            });\n\n        axios.get('https://api.themoviedb.org/3/genre/movie/list?api_key=' + API_TOKEN + '&language=fr')\n            .then(response => {\n                this.setState({ tmdbGenres: response.data.genres })\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    selectedFilm = (item) => {\n        // On récupére les genres du film\n        const selectedFilmGenres = item.genre_ids;\n        const genres = this.state.tmdbGenres;\n        const selectedFilmGenresNames = [];\n        genres.forEach((genre) => {\n            if (selectedFilmGenres.indexOf(genre.id) !== -1) {\n                selectedFilmGenresNames.push(genre.name)\n            }\n        })\n        console.log(item)\n\n        const selectedFilm = {\n            title: item.title,\n            poster_path: item.poster_path,\n            release_date: item.release_date,\n            genres_name: selectedFilmGenresNames,\n            overview: item.overview,\n            vote_average: item.vote_average\n        }\n\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], selectedFilm: selectedFilm, showResults: false })\n    }\n\n    validSelectedFilm = (event) => {\n        const selectedFilm = this.state.selectedFilm;\n        const selectedMedia = this.state.selectedMedia;\n        // On envoie les resultats au back\n        event.preventDefault();\n        console.log(selectedMedia)\n        axios.post(apiUrl + 'add-film', {\n            film: selectedFilm,\n            media_name: selectedMedia\n        })\n            .then(response => {\n                this.setState({ statusMessage: 'Film enregistré', statusMessageColor: 'green' });\n            })\n            .catch(error => {\n                this.setState({ statusMessage: 'Une erreur est arrivée', statusMessageColor: 'red' });\n            });\n        this.getMedia();\n    }\n\n    render() {\n        const searchResults = this.state.searchResults.map((item, i) => {\n            if ((item.poster_path !== 'https://image.tmdb.org/t/p/w300null')) {\n                return (\n                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(item)} key={i}>\n                        <img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                        <div className=\"video__content__video-info__text\">\n                            <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                            <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                        </div>\n                    </div >\n                );\n            } else {\n                return false\n            }\n        });\n        const mediasName = this.state.medias.map((item, i) => {\n            if (item.verified_by_admin) {\n                return (\n                    <option style={{ color: 'green' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            } else {\n                return (\n                    <option style={{ color: 'red' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            }\n        });\n        return (\n            <div className=\"admin-video\">\n                <div className=\"admin-video__content\">\n                    <button onClick={this.refresh}>Actualiser</button>\n                    <h2 className=\"admin-video__content__title\">Ajouter un film</h2>\n                    <form className=\"admin-video__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Choisir le média\n                            </label>\n                            <select name=\"medias\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectedMedia} value={this.state.selectedMedia}>\n                                {mediasName}\n                            </select>\n                        </div>\n                        <div className=\"admin-video__content__form__input-search\">\n                            <input autocomplete=\"off\" type=\"text\" className=\"admin-video__content__form__input-search__input\" id=\"InputId\" value={this.state.filmTitle} placeholder=\"Nom du film\" onChange={this.handleFilmTitleChange} />\n                        </div>\n\n                        <div className=\"admin-video__content__form__submit\">\n                            <button className=\"admin-video__content__form__submit__button\" onClick={this.searchOnTmdb}>\n                                Rechercher\n                            </button>\n                        </div>\n                    </form>\n                    {this.state.showResults\n                        ? <div className=\"admin-video__content__search-results\">\n                            {searchResults}\n                            {this.state.searchStatusMessageError &&\n                                <p style={{ color: 'red' }}>Aucun résultat pour cette recherche</p>\n                            }\n                        </div>\n\n                        : <div className=\"admin-video__content__selected-film\">\n                            {this.state.selectedFilm &&\n                                <div>\n                                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(this.state.selectedFilm)}>\n                                        <img src={this.state.selectedFilm.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                                        <div className=\"video__content__video-info__text\">\n                                            <span className=\"video__content__video-info__text__title\">{this.state.selectedFilm.title}</span>\n                                            <p className=\"video__content__video-info__text__overview\">{this.state.selectedFilm.overview.substr(0, 250)}</p>\n                                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {this.state.selectedFilm.vote_average} / 10</span>\n                                        </div>\n                                    </div >\n                                    <div className=\"admin-video__content__selected-film__player\">\n                                        <iframe\n                                            title=\"video-player\"\n                                            allowFullScreen=\"alloFullScreen\"\n                                            height=\"315\"\n                                            src={apiUrl + \"video/\" + this.state.selectedMedia}\n                                            width=\"100%\"\n                                            content-type=\"video/mkv\"\n                                        ></iframe>\n                                    </div>\n                                    <div className=\"admin-video__content__form__submit\">\n                                        <button className=\"admin-video__content__form__submit__button\" onClick={this.validSelectedFilm}>\n                                            Valider ce film\n                                        </button>\n                                    </div>\n                                    <div className=\"admin-video__content__message-status\">\n                                        {this.state.statusMessage &&\n                                            <p style={{ color: this.state.statusMessageColor }}>{this.state.statusMessage}</p>\n                                        }\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    }\n\n\n                </div>\n\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\nconst API_TOKEN = process.env.REACT_APP_TMDB_API_TOKEN;\n\nclass SeriesAdmin extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filmTitle: '',\n            searchResults: [],\n            selectedFilm: undefined,\n            showResults: true,\n            medias: [],\n            selectedMedia: undefined,\n            statusMessage: false,\n            statusMessageColor: undefined,\n            searchStatusMessageError: false\n        };\n    }\n\n    componentDidMount() {\n        // this.getMedia();\n    }\n\n    componentDidUpdate() {\n    }\n\n    refresh = (event) => {\n        axios.get(apiUrl + 'check-series'\n        )\n            .then(response => {\n                console.log(response)\n                this.getMedia()\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    getMedia = () => {\n        this.setState({ medias: [] })\n        axios.get(apiUrl + 'admin-all-films'\n        )\n            .then(response => {\n                response.data.map((item, i) => {\n                    let filmDetail = {\n                        'media_name': item.media_name,\n                        'verified_by_admin': item.verified_by_admin\n                    }\n\n                    let medias = this.state.medias;\n                    medias.push(filmDetail)\n                    this.setState({ medias: medias, selectedMedia: response.data[0].media_name })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    selectedMedia = (event) => {\n        this.setState({ selectedMedia: event.target.value, filmTitle: event.target.value });\n    }\n\n    handleFilmTitleChange = (e) => {\n        let filmTitleTarget = e.target.value;\n        this.setState({ filmTitle: filmTitleTarget });\n    }\n\n    searchOnTmdb = (event) => {\n        event.preventDefault();\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], showResults: true, statusMessage: false })\n        const filmTitle = this.state.filmTitle;\n        const url = 'https://api.themoviedb.org/3/search/movie?api_key=' + API_TOKEN + '&language=fr&query=' + filmTitle\n        axios.get(url\n        )\n            .then(response => {\n                // console.log(response)\n                response.data.results.map((item, i) => {\n                    let filmDetail = {\n                        'index': i,\n                        'title': item.title,\n                        'overview': item.overview,\n                        'poster_path': \"https://image.tmdb.org/t/p/w300\" + item.poster_path,\n                        'vote_average': item.vote_average,\n                        'release_date': item.release_date,\n                    }\n\n                    let searchResults = this.state.searchResults\n\n                    searchResults.push(filmDetail)\n                    this.setState({ searchResults: searchResults, searchStatusMessageError: false })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ searchStatusMessageError: true })\n            });\n    }\n\n    selectedFilm = (item) => {\n        console.log(item.overview)\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], selectedFilm: item, showResults: false })\n    }\n\n    validSelectedFilm = (event) => {\n        const selectedFilm = this.state.selectedFilm;\n        const selectedMedia = this.state.selectedMedia;\n        // On envoie les resultats au back\n        event.preventDefault();\n        console.log(selectedMedia)\n        axios.post(apiUrl + 'add-film', {\n            film: selectedFilm,\n            media_name: selectedMedia\n        })\n            .then(response => {\n                this.setState({ statusMessage: 'Film enregistré', statusMessageColor: 'green' });\n            })\n            .catch(error => {\n                this.setState({ statusMessage: 'Une erreur est arrivée', statusMessageColor: 'red' });\n            });\n        this.getMedia();\n    }\n\n    render() {\n        const searchResults = this.state.searchResults.map((item, i) => {\n            if ((item.poster_path !== 'https://image.tmdb.org/t/p/w300null')) {\n                return (\n                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(item)} key={i}>\n                        <img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                        <div className=\"video__content__video-info__text\">\n                            <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                            <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                        </div>\n                    </div >\n                );\n            } else {\n                return false\n            }\n        });\n        const mediasName = this.state.medias.map((item, i) => {\n            if (item.verified_by_admin) {\n                return (\n                    <option style={{ color: 'green' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            } else {\n                return (\n                    <option style={{ color: 'red' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            }\n        });\n        return (\n            <div className=\"admin-video\">\n                <div className=\"admin-video__content\">\n                    <button onClick={this.refresh}>Actualiser</button>\n                    <h2 className=\"admin-video__content__title\">Ajouter un film</h2>\n                    <form className=\"admin-video__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Choisir le média\n                            </label>\n                            <select name=\"medias\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectedMedia} value={this.state.selectedMedia}>\n                                {mediasName}\n                            </select>\n                        </div>\n                        <div className=\"admin-video__content__form__input-search\">\n                            <input type=\"text\" className=\"admin-video__content__form__input-search__input\" id=\"InputId\" value={this.state.filmTitle} placeholder=\"Nom du film\" onChange={this.handleFilmTitleChange} />\n                        </div>\n\n                        <div className=\"admin-video__content__form__submit\">\n                            <button className=\"admin-video__content__form__submit__button\" onClick={this.searchOnTmdb}>\n                                Rechercher\n                            </button>\n                        </div>\n                    </form>\n                    {this.state.showResults\n                        ? <div className=\"admin-video__content__search-results\">\n                            {searchResults}\n                            {this.state.searchStatusMessageError &&\n                                <p style={{ color: 'red' }}>Aucun résultat pour cette recherche</p>\n                            }\n                        </div>\n\n                        : <div className=\"admin-video__content__selected-film\">\n                            {this.state.selectedFilm &&\n                                <div>\n                                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(this.state.selectedFilm)}>\n                                        <img src={this.state.selectedFilm.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                                        <div className=\"video__content__video-info__text\">\n                                            <span className=\"video__content__video-info__text__title\">{this.state.selectedFilm.title}</span>\n                                            <p className=\"video__content__video-info__text__overview\">{this.state.selectedFilm.overview.substr(0, 250)}</p>\n                                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {this.state.selectedFilm.vote_average} / 10</span>\n                                        </div>\n                                    </div >\n                                    <div className=\"admin-video__content__selected-film__player\">\n                                        <iframe\n                                            title=\"video-player\"\n                                            allowFullScreen=\"alloFullScreen\"\n                                            height=\"315\"\n                                            src={apiUrl + \"video/\" + this.state.selectedMedia}\n                                            width=\"100%\"\n                                            content-type=\"video/mkv\"\n                                        ></iframe>\n                                    </div>\n                                    <div className=\"admin-video__content__form__submit\">\n                                        <button className=\"admin-video__content__form__submit__button\" onClick={this.validSelectedFilm}>\n                                            Valider ce film\n                                        </button>\n                                    </div>\n                                    <div className=\"admin-video__content__message-status\">\n                                        {this.state.statusMessage &&\n                                            <p style={{ color: this.state.statusMessageColor }}>{this.state.statusMessage}</p>\n                                        }\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    }\n\n\n                </div>\n\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SeriesAdmin);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            password: '',\n            role: 1,\n            validId: null,\n            validPassword: null,\n            connexionError: false,\n            users: [],\n            selectUserToDelete: undefined,\n            userDeleteMessage: false,\n            userDeleteColor: undefined\n        };\n    }\n\n    componentDidMount() {\n        this.getUsers();\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleIdChange = (e) => {\n        let idTarget = e.target.value;\n        this.setState({ id: idTarget });\n    }\n\n    handlePasswordChange = (e) => {\n        let passwordTarget = e.target.value;\n        this.setState({ password: passwordTarget });\n    }\n\n    handleRoleChange = (e) => {\n        let roleTarget = e.target.value;\n        this.setState({ role: roleTarget });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(this.state.id + '  ' + this.state.password + '  ' + this.state.role)\n        axios.post(apiUrl + 'register', {\n            identifiant: this.state.id,\n            password: this.state.password,\n            role: this.state.role\n        })\n            .then(response => {\n                console.log(response)\n                this.getUsers();\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ connexionError: true });\n            });\n    }\n\n    getUsers = () => {\n        axios.get(apiUrl + 'get-all-users'\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ users: response.data });\n            })\n            .catch(error => {\n            });\n    }\n\n    selectUserToDelete = (event) => {\n        this.setState({ selectUserToDelete: event.target.value });\n    }\n\n    handleSubmitDeleteUser = (event) => {\n        event.preventDefault();\n        axios.delete(apiUrl + 'delete/' + this.state.selectUserToDelete)\n            .then(response => {\n                console.log(response)\n                this.setState({ userDeleteMessage: response.data, userDeleteColor: 'green' });\n                this.getUsers();\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ userDeleteMessage: 'Une erreur est arrivée', userDeleteColor: 'red' });\n            });\n    }\n\n    render() {\n        const usersName = this.state.users.map((item, i) => {\n            return (\n                <option value={item.name} key={i}>{item.name}</option>\n            );\n        });\n        return (\n            <div className=\"connexion\">\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Ajouter utilisateur</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <input type=\"text\" className=\"\" id=\"InputId\" value={this.state.id} onChange={this.handleIdChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Mot de Passe\n                            </label>\n                            <input type=\"text\" className=\"\" id=\"InputPassword\" value={this.state.password} onChange={this.handlePasswordChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Role\n                            </label>\n                            <input type=\"number\" className=\"\" id=\"InputPassword\" value={this.state.role} onChange={this.handleRoleChange} />\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"btn btn-primary\" onClick={this.handleSubmit}>\n                                Valider\n                            </button>\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.connexionError &&\n                                <p>Identifiants invalides, veuillez réessayer</p>\n                            }\n                        </div>\n                    </form>\n                </div>\n                <hr />\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Supprimer utilisateur</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <select name=\"users\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectUserToDelete} value={this.state.selectUserToDelete}>\n                                {usersName}\n                            </select>\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"btn btn-primary\" onClick={this.handleSubmitDeleteUser}>\n                                Valider\n                            </button>\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.userDeleteMessage &&\n                                <p style={{ color: this.state.userDeleteColor }}>{this.state.userDeleteMessage}</p>\n                            }\n                        </div>\n                    </form>\n                </div>\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\n\n","import React, { Component } from 'react';\nimport Fuse from 'fuse.js'\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Series extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadVideosSpinner: false,\n            listOfSeries: []\n        };\n    }\n\n    componentDidMount() {\n        // Get all videos\n        this.getSeries();\n    }\n\n    componentDidUpdate() {\n        console.log(this.state.listOfSeries)\n    }\n\n    getSeries = () => {\n        this.setState({ loadVideosSpinner: true })\n        axios.get(apiUrl + 'check-series'\n        )\n            .then(response => {\n                this.setState({ listOfSeries: response.data })\n            })\n            .catch(error => {\n                this.setState({ loadVideosSpinner: false })\n            });\n    }\n\n    render() {\n        const listOfSeries = this.state.listOfSeries.map((item, i) => {\n            return (\n                <Link className=\"video__content__video-info\" to={'/serie-detail/' + item.serie_name} key={i}>\n                    {/* < img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" /> */}\n                    <div className=\"video__content__video-info__text\">\n                        <span className=\"video__content__video-info__text__title\">{item.serie_name}</span>\n                        <span className=\"video__content__video-info__text__title\">{item.seasons.length} saisons</span>\n                    </div>\n                </Link >\n            );\n        });\n\n        return (\n            <div className=\"video\" >\n                <h2>Series</h2>\n                {listOfSeries}\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Series);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Cookies from 'js-cookie';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Home from '../Home';\nimport Music from '../Music';\nimport Video from '../Video';\nimport VideoDetail from '../VideoDetail/index.jsx';\nimport ServerIsDown from '../ServerIsDown';\nimport App from '../App';\nimport Authentificator from \"../Authentificator\";\nimport Administration from \"../Administration\";\nimport VideoAdmin from '../VideoAdmin';\nimport SeriesAdmin from '../SeriesAdmin';\nimport Users from '../Users';\nimport Series from '../Series';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: Cookies.get('name'),\n            role: Cookies.get('role')\n        };\n    }\n\n    componentDidMount() {\n\n        this.getServerStatus();\n        console.log(this.state)\n\n        // Vérifie si des cookies sont existant\n        if (this.state.name && this.state.role) {\n            let cookie = {\n                'name': this.state.name,\n                'role': this.state.role\n            }\n\n            const action = { type: \"SAVE_USER\", value: cookie }\n            this.props.dispatch(action)\n        }\n    }\n\n    componentDidUpdate() {\n    }\n\n    getServerStatus = () => {\n        axios.get(apiUrl + 'start'\n        )\n            .then(response => {\n                const action = { type: \"SERVER_IS_START\", value: true }\n                this.props.dispatch(action)\n            })\n            .catch(error => {\n                const action = { type: \"SERVER_IS_START\", value: false }\n                this.props.dispatch(action)\n            });\n\n    }\n\n    render() {\n        let render;\n        if (!this.props.serverIsDown) {\n            render = <ServerIsDown />\n        } else if (!this.props.isConnect) {\n            render = <Authentificator />\n        } else {\n            render =\n                <Switch>\n                    <Route path=\"/admin/series\">\n                        <SeriesAdmin />\n                    </Route>\n                    <Route path=\"/series\">\n                        <Series />\n                    </Route>\n                    <Route path=\"/admin/videos\">\n                        <VideoAdmin />\n                    </Route>\n                    <Route path=\"/admin/users\">\n                        <Users />\n                    </Route>\n                    <Route path=\"/admin\">\n                        <Administration />\n                    </Route>\n                    <Route path=\"/video-detail\" component={App}>\n                        <VideoDetail />\n                    </Route>\n                    <Route path=\"/video\">\n                        <Video />\n                    </Route>\n                    <Route path=\"/music\">\n                        <Music />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n        }\n        return (\n            <div className=\"navigation\">\n                <Router>\n                    <div className=\"navigation__header\">\n                        <Link className=\"navigation__header__title\" to=\"/\">\n                            <h1>SITH</h1>\n                            <span>By Jellfedora</span>\n                        </Link>\n                    </div>\n                    {render}\n\n                </Router >\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        serverIsDown: state.server.isStart,\n        isConnect: state.user.isConnect,\n        userRole: state.user.role,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);\n\n","import React from 'react';\n// Import Redux Store\nimport { Provider } from \"react-redux\";\nimport store from '../../store';\n// Import Sass\nimport \"../../styles/index.scss\";\n// Import Components\nimport Navigation from \"../Navigation\";\n\n// Fontawesome 5\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPlay, faStop, faFastForward, faFastBackward, faPause, faChevronLeft, faRetweet, faRandom, faForward, faBackward, faEye, faEyeSlash, faSpinner, faTimesCircle, faCompress, faTv, faUpload, faHome } from '@fortawesome/free-solid-svg-icons';\nimport { faChromecast, } from '@fortawesome/free-brands-svg-icons'; //For brand icons\nlibrary.add(faPlay, faStop, faFastForward, faFastBackward, faPause, faChevronLeft, faRetweet, faRandom, faForward, faBackward, faChromecast, faEye, faEyeSlash, faSpinner, faTimesCircle, faCompress, faTv, faUpload, faHome);\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <Navigation />\n        </Provider>\n    );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}