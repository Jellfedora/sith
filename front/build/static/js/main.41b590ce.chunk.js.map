{"version":3,"sources":["store/reducer/server-reducer.js","store/reducer/user-reducer.js","store/reducer/index.js","store/index.js","components/Home/index.jsx","components/Music/index.jsx","components/Video/index.jsx","components/VideoDetail/index.jsx","components/ServerIsDown/index.jsx","components/Authentificator/index.jsx","components/Administration/index.jsx","components/VideoAdmin/index.jsx","components/Users/index.jsx","components/Navigation/index.jsx","components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","isStart","serverReducer","state","action","type","value","isConnect","identifiant","role","userReducer","rootReducer","combineReducers","server","user","store","createStore","Home","props","levelAccess","console","log","this","userRole","className","to","Component","connect","dispatch","apiUrl","process","audio","Music","activeRandomSong","randomSong","setState","reloadSong","reloadAlbum","activeReloadSong","activeReloadAlbum","playNextSong","currentTime","play","max","Math","floor","listOfSongs","length","randomIndexSong","random","getStream","indexOfActualSong","indexOf","songTitle","nextSongName","getAllFolders","axios","get","then","response","listOfFolders","data","catch","error","getAllSongs","repertorySongs","repertoryImg","changePlayerState","playerStatus","pause","fastBackward","fastForward","songIsCharged","duration","source","showMusicFolder","openFolder","isFirstSongOfAlbulm","getAlbumImg","prevProps","prevState","onended","responseType","base64","btoa","Uint8Array","reduce","byte","String","fromCharCode","selectedTrack","Audio","ontimeupdate","getCurrentTime","selectedFolder","time","isNaN","slice","getDuration","map","item","i","key","onClick","icon","disabled","backward","size","forward","Video","getVideos","listOfVideos","filmDetail","push","streamVideo","selectVideo","title","src","poster_path","alt","overview","substr","vote_average","VideoDetail","getVideoInfo","filmTitle","media_name","release_date","videoIsPlay","location","pathname","split","allowFullScreen","height","width","content-type","withRouter","ServerIsDown","getServerStatus","setTimeout","Authentificator","handleIdChange","e","idTarget","target","id","handlePasswordChange","passwordTarget","password","handleSubmit","event","preventDefault","post","connexionError","validId","validPassword","htmlFor","onChange","Administration","selectPage","refresh","getMedia","verified_by_admin","medias","selectedMedia","handleFilmTitleChange","filmTitleTarget","searchOnTmdb","searchResults","showResults","statusMessage","url","results","searchStatusMessageError","selectedFilm","validSelectedFilm","film","statusMessageColor","undefined","mediasName","style","color","name","placeholder","Users","handleRoleChange","roleTarget","getUsers","users","selectUserToDelete","handleSubmitDeleteUser","delete","userDeleteMessage","userDeleteColor","usersName","Navigation","render","serverIsDown","path","VideoAdmin","component","App","library","add","faPlay","faStop","faFastForward","faFastBackward","faPause","faChevronLeft","faRetweet","faRandom","faForward","faBackward","faChromecast","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.41b590ce.chunk.js","sourcesContent":["const initialState = {\n    isStart: false,\n}\n\nfunction serverReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'SERVER_IS_START':\n            nextState = {\n                ...state,\n                isStart: action.value\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default serverReducer","const initialState = {\n    isConnect: false,\n    identifiant: null,\n    role: null\n}\n\nfunction userReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'SAVE_USER':\n            nextState = {\n                ...state,\n                isConnect: true,\n                identifiant: action.value.identifiant,\n                role: action.value.role\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default userReducer","import { combineReducers } from 'redux';\nimport server from './server-reducer';\nimport user from './user-reducer';\n\nconst rootReducer = combineReducers({\n    server,\n    user\n});\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './reducer';\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Link\n} from \"react-router-dom\";\nimport axios from 'axios';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    render() {\n        let levelAccess;\n        console.log(this.props.userRole)\n        if (this.props.userRole === 3) {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span>Musiques</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span>Todo Galerie</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/admin\">\n                        <span>Administration</span>\n                    </Link>\n                </div>\n        } else if (this.props.userRole === 2) {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span>Musiques</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span>Todo Galerie</span>\n                    </Link>\n                </div>\n        }\n        else {\n            levelAccess = \"\"\n        }\n        return (\n            <div className=\"home\">\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/video\">\n                        <span>Vidéos</span>\n                    </Link>\n                    {levelAccess}\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        userRole: state.user.role,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\n// import defaultCover from '../../ressources/images/default-cover.jpg';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nlet audio = null;\n\nclass Music extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedTrack: null,\n            listOfSongs: [],\n            playerStatus: \"stopped\",\n            songIsCharged: false,\n            currentTime: \"0:00\",\n            duration: \"0:00\",\n            songTitle: '',\n            source: null,\n            showMusicFolder: true,\n            listOfFolders: [],\n            openFolder: null,\n            reloadAlbum: false,\n            reloadSong: false,\n            randomSong: false,\n            isFirstSongOfAlbulm: false\n        };\n    }\n    componentDidMount() {\n        // Get all music folders\n        this.getAllFolders();\n        // Get the image album\n        this.getAlbumImg()\n        // Get all songs list\n        // this.getAllSongs();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        // TODO gérer le passage à la chanson suivante en fin de la précédente\n        if (this.state.songIsCharged) {\n            audio.onended = () => {\n                this.playNextSong();\n            }\n        }\n    }\n\n    // TODO Gérer le retour sur la home quand une musique est jouée (musique continue mais controle broken)\n\n    activeRandomSong = () => {\n        if (this.state.randomSong) {\n            this.setState({ randomSong: false });\n        } else {\n            this.setState({ randomSong: true, reloadSong: false, reloadAlbum: false });\n        }\n    }\n\n    activeReloadSong = () => {\n        if (this.state.reloadSong) {\n            this.setState({ reloadSong: false });\n        } else {\n            this.setState({ reloadSong: true, reloadAlbum: false, randomSong: false });\n        }\n    }\n\n    activeReloadAlbum = () => {\n        if (this.state.reloadAlbum) {\n            this.setState({ reloadAlbum: false });\n        } else {\n            this.setState({ reloadAlbum: true, reloadSong: false, randomSong: false });\n        }\n    }\n\n    playNextSong = () => {\n        // Si le reload de la chanson en cours est activé\n        if (this.state.reloadSong) {\n            // On remet le compteur à zéro\n            audio.currentTime = 0\n            audio.play()\n        } else if (this.state.randomSong) {\n            var max = Math.floor(this.state.listOfSongs.length - 1);\n            var randomIndexSong = Math.floor(Math.random() * (max - 0)) + 0;\n            this.getStream(this.state.listOfSongs[randomIndexSong]);\n        } else {\n            // Récupérer lindex de la chanson actuelle dans listOfSongs\n            var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n            var nextSongName = this.state.listOfSongs[indexOfActualSong + 1];\n\n            // Stopper si c'est la derniére chanson de la liste\n            var countOfIndex = this.state.listOfSongs.length - 1;\n            if (indexOfActualSong + 1 <= countOfIndex) {\n                // Envoyer la chanson suivante\n                this.getStream(nextSongName);\n            }\n            // Todo revenir à la premiére chanson si activé\n            else if (this.state.reloadAlbum) {\n                // On envoie le titre de la premiére chanson de l'album\n                this.getStream(this.state.listOfSongs[0]);\n            }\n        }\n\n    }\n\n    // Get album Img^^\n    getAlbumImg() {\n        axios.get(\n            apiUrl + 'img/',\n            { responseType: 'arraybuffer' },\n        )\n            .then(response => {\n                const base64 = btoa(\n                    new Uint8Array(response.data).reduce(\n                        (data, byte) => data + String.fromCharCode(byte),\n                        '',\n                    ),\n                );\n                this.setState({ source: \"data:;base64,\" + base64 });\n            });\n    }\n\n    getStream(selectedTrack) {\n        if (this.state.songIsCharged) {\n            audio.pause() //Stop the former song\n        }\n\n        this.setState({ songIsCharged: true, songTitle: selectedTrack, playerStatus: 'playing' });\n\n        audio = new Audio(apiUrl + 'play/' + this.state.openFolder + '/' + selectedTrack);\n        audio.play();\n        audio.ontimeupdate = () => {\n            this.getCurrentTime()\n        }\n\n    }\n\n    openFolder(selectedFolder) {\n        axios.get(apiUrl + 'get-folder-songs/' + selectedFolder\n        )\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    listOfSongs: response.data.repertorySongs,\n                    repertoryImg: response.data.repertoryImg,\n                    showMusicFolder: false,\n                    openFolder: selectedFolder\n                })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    getAllFolders = () => {\n        axios.get(apiUrl + 'music/folder'\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ listOfFolders: response.data })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    getAllSongs = () => {\n        axios.get(apiUrl + 'get-all-songs/'\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ listOfSongs: response.data.repertorySongs, repertoryImg: response.data.repertoryImg })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    // Play / Pause \n    changePlayerState = () => {\n        if (this.state.playerStatus === \"paused\") {\n            audio.play();\n            this.setState({ playerStatus: 'playing' })\n        } else {\n            audio.pause();\n            this.setState({ playerStatus: 'paused' })\n        }\n    }\n\n    backward() {\n        audio.currentTime = audio.currentTime - 10;\n    }\n\n    forward() {\n        audio.currentTime = audio.currentTime + 10;\n    }\n\n    fastBackward = () => {\n        // Récupérer lindex de la chanson actuelle dans listOfSongs\n        var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n        var nextSongName = this.state.listOfSongs[indexOfActualSong - 1];\n\n        // Stopper si c'est la derniére chanson de la liste\n        if (indexOfActualSong - 1 >= 0) {\n            // Envoyer la chanson suivante\n            this.getStream(nextSongName);\n        }\n    }\n\n    fastForward = () => {\n        // Récupérer lindex de la chanson actuelle dans listOfSongs\n        var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n        var nextSongName = this.state.listOfSongs[indexOfActualSong + 1];\n\n        // Stopper si c'est la derniére chanson de la liste\n        var countOfIndex = this.state.listOfSongs.length - 1;\n        if (indexOfActualSong + 1 <= countOfIndex) {\n            // Envoyer la chanson suivante\n            this.getStream(nextSongName);\n        }\n        // Todo revenir à la premiére chanson si activé\n        else {\n            // On envoie le titre de la premiére chanson de l'album\n            this.getStream(this.state.listOfSongs[0]);\n        }\n    }\n\n    // OKK\n    getTime(time) {\n        if (!isNaN(time)) {\n            return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2)\n        }\n    }\n\n    // OKK\n    getCurrentTime() {\n        if (this.state.songIsCharged === true) {\n            var currentTime = Math.floor(audio.currentTime / 60) + ':' + ('0' + Math.floor(audio.currentTime % 60)).slice(-2)\n            this.setState({ currentTime: currentTime })\n\n\n\n            // TODO A deplacer\n            // Définit si c'est la premiére chanson de la liste\n            if (this.state.listOfSongs.indexOf(this.state.songTitle) == 0) {\n                this.setState({ isFirstSongOfAlbulm: true });\n            } else {\n                this.setState({ isFirstSongOfAlbulm: false });\n            }\n        }\n    }\n\n    // OKK\n    getDuration() {\n        if (this.state.songIsCharged === true) {\n            let duration = Math.floor(audio.duration / 60) + ':' + ('0' + Math.floor(audio.duration % 60)).slice(-2);\n            if (isNaN(audio.duration)) {\n                return \"\"\n            } else {\n                return duration;\n            }\n        }\n    }\n\n    render() {\n        const openFolder = this.state.openFolder;\n        const songTitle = this.state.songTitle;\n        const songImg = this.state.source;\n        const currentTime = this.state.currentTime;\n        const duration = this.getDuration();\n        const listOfFolders = this.state.listOfFolders.map((item, i) => {\n            return (\n                <div\n                    className=\"music__folder__folder-title\"\n                    key={i}\n                    onClick={() => this.openFolder(item)}>\n                    <span>{item}</span>\n                </div>\n            );\n        });\n        const listOfSongs = this.state.listOfSongs.map((item, i) => {\n            return (\n                <div\n                    className=\"music__list__song-title\"\n                    key={i}\n                    onClick={() => this.getStream(item)}\n                >\n                    <span>{item}</span>\n\n                </div>\n            )\n        });\n\n        return (\n            <div className=\"music\">\n                {this.state.showMusicFolder ? (\n                    <div className=\"music__folder\">\n                        {/* TODO Ajouter titre */}\n                        {listOfFolders}\n                    </div>\n                ) : (\n                        <div className=\"music__list\">\n                            {/* TODO Ajouter titre */}\n                            {listOfSongs}\n                        </div>\n                    )}\n                <div className=\"music__player\">\n                    <div className=\"music__player__song-information\">\n                        <div className=\"music__player__song-information__content\">\n                            <span className=\"music__player__song-information__content__song-title\">{songTitle}</span>\n                            <span className=\"music__player__song-information__content__album-title\">{openFolder}</span>\n                        </div>\n                    </div>\n                    <div className=\"music__player__timer\">\n                        {this.state.playerStatus === \"playing\" || this.state.playerStatus === \"paused\" ? (\n                            <div className=\"music__player__timer__currentime\">\n                                <span>\n                                    {currentTime} / {duration}\n                                </span>\n                            </div>\n                        ) : (\n                                <div className=\"music__player__timer__currentime\">\n                                    <span>\n                                        0:00 / 0:00\n                                </span>\n                                </div>\n                            )}\n                        <div className=\"music__player__timer__song-options\">\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.randomSong ? 'isCheck' : '')} onClick={this.activeRandomSong}>\n                                <FontAwesomeIcon\n                                    icon=\"random\"\n                                />\n                            </button>\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.reloadSong ? 'isCheck' : '')} onClick={this.activeReloadSong}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__timer__song-options__reload-button__reload-song-span\">1</span>\n                            </button>\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.reloadAlbum ? 'isCheck' : '')} onClick={this.activeReloadAlbum}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__timer__song-options__reload-button__reload-song-span\">all</span>\n                            </button>\n                            <button className={\"music__player__timer__song-options__cast-button \"} onClick={() => this.setState({ showMusicFolder: true })}>\n                                <FontAwesomeIcon\n                                    icon={['fab', 'chromecast']}\n                                />\n                            </button>\n                        </div>\n                    </div>\n\n\n                    <div className=\"music__player__control\">\n                        <div className=\"music__player__control__buttons\">\n                            {this.state.isFirstSongOfAlbulm\n                                ? <button disabled className=\"music__player__control__buttons__button music__player__control__button__back isDisabled\" onClick={this.fastBackward}>\n                                    <FontAwesomeIcon\n                                        icon=\"fast-backward\"\n                                    />\n                                </button>\n                                : <button className=\"music__player__control__buttons__button music__player__control__button__back\" onClick={this.fastBackward}>\n                                    <FontAwesomeIcon\n                                        icon=\"fast-backward\"\n                                    />\n                                </button>\n                            }\n                            <button className=\"music__player__control__buttons__button music__player__control__button__back\" onClick={this.backward}>\n                                <FontAwesomeIcon\n                                    icon=\"backward\"\n                                />\n                            </button>\n                            {this.state.playerStatus === \"stopped\" || this.state.playerStatus === \"paused\"\n                                ? <button className=\"music__player__control__buttons__button\" onClick={this.changePlayerState}>\n                                    <FontAwesomeIcon\n                                        icon=\"play\"\n                                        size=\"1x\"\n                                    />\n                                </button>\n                                : <button className=\"music__player__control__buttons__button\" onClick={this.changePlayerState}>\n                                    <FontAwesomeIcon\n                                        icon=\"pause\"\n                                        size=\"1x\"\n                                    />\n                                </button>\n                            }\n\n                            <button className=\"music__player__control__buttons__button music__player__control__button__next\" onClick={this.forward}>\n                                <FontAwesomeIcon\n                                    icon=\"forward\"\n                                />\n                            </button>\n                            <button className=\"music__player__control__buttons__button music__player__control__button__next\" onClick={this.fastForward}>\n                                <FontAwesomeIcon\n                                    icon=\"fast-forward\"\n                                />\n                            </button>\n                            {/* <button className=\"music__player__control__button\" onClick={() => this.setState({ playerStatus: \"stopped\" })}>\n                            <FontAwesomeIcon\n                                icon=\"stop\"\n                            />\n                        </button> */}\n                        </div>\n\n                        {/* <div className=\"music__player__control__song-options\">\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.randomSong ? 'isCheck' : '')} onClick={this.activeRandomSong}>\n                                <FontAwesomeIcon\n                                    icon=\"random\"\n                                />\n                            </button>\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.reloadSong ? 'isCheck' : '')} onClick={this.activeReloadSong}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__control__song-options__reload-button__reload-song-span\">1</span>\n                            </button>\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.reloadAlbum ? 'isCheck' : '')} onClick={this.activeReloadAlbum}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__control__song-options__reload-button__reload-song-span\">all</span>\n                            </button>\n                        </div> */}\n\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isStart: state.home.isStart,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Music);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\n\nconst apiUrl = process.env.REACT_APP_REST_API;\nconst API_TOKEN = process.env.REACT_APP_TMDB_API_TOKEN;\n\nclass Video extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listOfVideos: [],\n            selectVideo: null\n        };\n    }\n\n    componentDidMount() {\n        // Get all videos\n        this.getVideos();\n\n    }\n\n    componentDidUpdate() {\n        console.log(this.state.listOfVideos)\n    }\n\n    getVideos = () => {\n        axios.get(apiUrl + 'all-films'\n        )\n            .then(response => {\n                console.log(response)\n                let listOfVideos = this.state.listOfVideos\n\n                response.data.map((item, i) => {\n                    let filmDetail = item;\n                    listOfVideos.push(filmDetail);\n                    this.setState({ listOfVideos: listOfVideos })\n                })\n            })\n            .catch(error => {\n            });\n    }\n\n    // getVideoInfo = (filmTitle, i) => {\n    //     // Tmdb test\n    //     console.log(filmTitle)\n    //     const url = 'https://api.themoviedb.org/3/search/movie?api_key=' + API_TOKEN + '&language=fr&query=' + filmTitle\n    //     axios.get(url\n    //     )\n    //         .then(response => {\n    //             console.log(response)\n    //             let listOfVideos = this.state.listOfVideos\n    //             let filmDetail = {\n    //                 'title': filmTitle,\n    //                 'overview': response.data.results[0].overview,\n    //                 'poster_path': \"https://image.tmdb.org/t/p/w300\" + response.data.results[0].poster_path,\n    //                 'vote_average': response.data.results[0].vote_average,\n    //             }\n    //             listOfVideos.push(filmDetail)\n    //             this.setState({ listOfVideos: listOfVideos })\n    //         })\n    //         .catch(error => {\n    //         });\n\n\n    // }\n\n    streamVideo = (item) => {\n        console.log(item)\n        this.setState({ selectVideo: item })\n    }\n\n    render() {\n        const listOfVideos = this.state.listOfVideos.map((item, i) => {\n            return (\n                <Link className=\"video__content__video-info\" to={'/video-detail/' + item.title} key={i}>\n                    < img src={item.poster_path} alt=\"film-photo\" className=\"video__content__video-info__img\" />\n                    <div className=\"video__content__video-info__text\">\n                        <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                        <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                        <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                    </div>\n                </Link >\n            );\n        });\n        const selectVideo = this.state.selectVideo;\n\n        return (\n            <div className=\"video\" >\n                <div className=\"video__content\">\n                    {listOfVideos}\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\nconst API_TOKEN = \"9c9ae8a3d0afe9b28787537f6455c4f0\";\n\nclass VideoDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectVideo: null,\n            videoIsPlay: false\n        };\n    }\n\n    componentDidMount() {\n        const filmTitle = this.props.location.pathname.split('/')[2]\n        this.getVideoInfo(filmTitle);\n\n    }\n    componentDidUpdate() {\n        console.log(this.state.selectVideo)\n    }\n\n    getVideoInfo = (filmTitle) => {\n        // axios.get(url\n        // )\n        //     .then(response => {\n        //         let filmDetail = {\n        //             'title': filmTitle,\n        //             'overview': response.data.results[0].overview,\n        //             'poster_path': \"https://image.tmdb.org/t/p/w300\" + response.data.results[0].poster_path,\n        //             'vote_average': response.data.results[0].vote_average,\n        //         }\n        //         // selectVideo.push(filmDetail)\n        //         this.setState({ selectVideo: filmDetail })\n        //         console.log(this.state.selectVideo)\n        //     })\n        //     .catch(error => {\n        //         // this.setState({ loadSpinner: false });\n        //     });\n        axios.get(apiUrl + 'one-film/' + filmTitle\n        )\n            .then(response => {\n                let filmDetail = {\n                    'title': response.data.title,\n                    'overview': response.data.overview,\n                    'poster_path': response.data.poster_path,\n                    'vote_average': response.data.vote_average,\n                    'media_name': response.data.media_name,\n                    'release_date': response.data.release_date\n                }\n                // selectVideo.push(filmDetail)\n                this.setState({ selectVideo: filmDetail })\n                console.log(this.state.selectVideo)\n            })\n            .catch(error => {\n            });\n    }\n\n\n    render() {\n        const item = this.state.selectVideo;\n\n        return (\n            <div className=\"video-detail\">\n                {this.state.selectVideo &&\n                    <div className=\"video-detail__content\">\n                        <img src={this.state.selectVideo.poster_path} alt=\"film-photo\" className=\"video-detail__content__img\" />\n                        <div className=\"video-detail__content__text\">\n                            <h2 className=\"video-detail__content__text__title\">{this.state.selectVideo.title}</h2>\n                            <p className=\"video-detail__content__text__overview\">{this.state.selectVideo.overview}</p>\n                            <span className=\"video-detail__content__text__vote\">Note Tmdb: {this.state.selectVideo.vote_average} / 10</span>\n                            <span className=\"video-detail__content__text__vote\">Sortie: {this.state.selectVideo.release_date} / 10</span>\n                        </div>\n                        <div className=\"video-detail__player\">\n\n                            {!this.state.videoIsPlay &&\n                                <button onClick={() => this.setState({ videoIsPlay: true })}>\n                                    Regarder\n                                </button>\n                            }\n                            {this.state.videoIsPlay &&\n                                <iframe\n                                    allowFullScreen=\"alloFullScreen\"\n                                    height=\"315\"\n                                    src={apiUrl + \"video/\" + this.state.selectVideo.media_name}\n                                    width=\"100%\"\n                                    content-type=\"video/mkv\"\n                                ></iframe>\n                            }\n                        </div>\n                    </div >\n                }\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isStart: state.home.isStart,\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(VideoDetail));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass ServerIsDown extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ServerIsDown: false\n        };\n    }\n\n    componentDidMount() {\n        this.getServerStatus();\n    }\n\n    componentDidUpdate() {\n        console.log('navigation')\n        // this.getServerStatus();\n    }\n\n    getServerStatus = () => {\n        setTimeout(() => {\n            axios.get(apiUrl + 'start'\n            )\n                .then(response => {\n                    const action = { type: \"SERVER_IS_START\", value: true }\n                    this.props.dispatch(action)\n                    this.getServerStatus()\n                })\n                .catch(error => {\n                    const action = { type: \"SERVER_IS_START\", value: false }\n                    this.props.dispatch(action)\n                    this.getServerStatus()\n                });\n        }, 3000);\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"server-down\">\n                <div className=\"server-down__content\">\n                    <h2 className=\"server-down__content__title\">Le serveur est actuellement en maintenance</h2>\n                    <p className=\"server-down__content__message\">Veuillez contacter l'administrateur du site ou réessayer plus tard</p>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isStart: state.home.isStart,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ServerIsDown);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Authentificator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            password: '',\n            validId: null,\n            validPassword: null,\n            connexionError: false\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n        console.log('navigation')\n        // this.getServerStatus();\n    }\n\n    handleIdChange = (e) => {\n        let idTarget = e.target.value;\n        this.setState({ id: idTarget });\n    }\n\n    handlePasswordChange = (e) => {\n        let passwordTarget = e.target.value;\n        this.setState({ password: passwordTarget });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(this.state.id + '  ' + this.state.password)\n        axios.post(apiUrl + 'login', {\n            identifiant: this.state.id,\n            password: this.state.password\n        })\n            .then(response => {\n                console.log(response)\n                const action = { type: \"SAVE_USER\", value: response.data }\n                this.props.dispatch(action)\n                // this.setState({ loadSpinner: false, redirectToAccount: true });\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ connexionError: true });\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"connexion\">\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Connexion requise pour accéder à nos différents services</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <input type=\"text\" className=\"\" id=\"InputId\" value={this.state.id} onChange={this.handleIdChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Mot de Passe\n                            </label>\n                            <input type=\"password\" className=\"\" id=\"InputPassword\" value={this.state.password} onChange={this.handlePasswordChange} />\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"btn btn-primary\" onClick={this.handleSubmit}>\n                                Connexion\n                            </button>\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.connexionError &&\n                                <p>Identifiants invalides, veuillez réessayer</p>\n                            }\n                        </div>\n                    </form>\n                    <p className=\"connexion__content__message\">Si vous avez perdu votre identifiant ou votre mot de passe. Contacter l'administrateur, aucun mot de passe ou identifiant ne sera envoyé par courriel</p>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Authentificator);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Administration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectPage: 0,\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    // handleIdChange = (e) => {\n    //     let idTarget = e.target.value;\n    //     this.setState({ id: idTarget });\n    // }\n\n    render() {\n        return (\n            <div className=\"admin\">\n                <Link className=\"admin__link\" to=\"/admin/users\">\n                    <span>Gestion Utilisateurs</span>\n                </Link>\n                <Link className=\"admin__link\" to=\"/admin/videos\">\n                    <span>Gestion Vidéos</span>\n                </Link>\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nconst apiUrl = process.env.REACT_APP_REST_API;\nconst API_TOKEN = process.env.REACT_APP_TMDB_API_TOKEN;\n\nclass Administration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filmTitle: '',\n            searchResults: [],\n            selectedFilm: undefined,\n            showResults: true,\n            medias: [],\n            selectedMedia: undefined,\n            statusMessage: false,\n            statusMessageColor: undefined,\n            searchStatusMessageError: false\n        };\n    }\n\n    componentDidMount() {\n        this.getMedia();\n    }\n\n    componentDidUpdate() {\n        console.log(this.state)\n    }\n\n    refresh = (event) => {\n        axios.get(apiUrl + 'check-films'\n        )\n            .then(response => {\n                console.log(response)\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    getMedia = () => {\n        axios.get(apiUrl + 'all-films'\n        )\n            .then(response => {\n                response.data.map((item, i) => {\n                    let filmDetail = {\n                        'media_name': item.media_name,\n                        'verified_by_admin': item.verified_by_admin\n                    }\n\n                    let medias = this.state.medias;\n                    medias.push(filmDetail)\n                    this.setState({ medias: medias, selectedMedia: response.data[0].media_name })\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    selectedMedia = (event) => {\n        this.setState({ selectedMedia: event.target.value });\n    }\n\n    handleFilmTitleChange = (e) => {\n        let filmTitleTarget = e.target.value;\n        this.setState({ filmTitle: filmTitleTarget });\n    }\n\n    searchOnTmdb = (event) => {\n        event.preventDefault();\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], showResults: true, statusMessage: false })\n        const filmTitle = this.state.filmTitle;\n        const url = 'https://api.themoviedb.org/3/search/movie?api_key=' + API_TOKEN + '&language=fr&query=' + filmTitle\n        axios.get(url\n        )\n            .then(response => {\n                // console.log(response)\n                response.data.results.map((item, i) => {\n                    let filmDetail = {\n                        'index': i,\n                        'title': item.title,\n                        'overview': item.overview,\n                        'poster_path': \"https://image.tmdb.org/t/p/w300\" + item.poster_path,\n                        'vote_average': item.vote_average,\n                        'release_date': item.release_date,\n                    }\n\n                    let searchResults = this.state.searchResults\n\n                    searchResults.push(filmDetail)\n                    this.setState({ searchResults: searchResults, searchStatusMessageError: false })\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ searchStatusMessageError: true })\n            });\n    }\n\n    selectedFilm = (item) => {\n        console.log(item.overview)\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], selectedFilm: item, showResults: false })\n    }\n\n    validSelectedFilm = (event) => {\n        const selectedFilm = this.state.selectedFilm;\n        const selectedMedia = this.state.selectedMedia;\n        // On envoie les resultats au back\n        event.preventDefault();\n        console.log(selectedMedia)\n        axios.post(apiUrl + 'add-film', {\n            film: selectedFilm,\n            media_name: selectedMedia\n        })\n            .then(response => {\n                this.setState({ statusMessage: 'Film enregistré', statusMessageColor: 'green' });\n            })\n            .catch(error => {\n                this.setState({ statusMessage: 'Une erreur est arrivée', statusMessageColor: 'red' });\n            });\n        this.getMedia();\n    }\n\n    render() {\n        const searchResults = this.state.searchResults.map((item, i) => {\n            if ((item.poster_path !== 'https://image.tmdb.org/t/p/w300null')) {\n                return (\n                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(item)} key={i}>\n                        <img src={item.poster_path} alt=\"film-photo\" className=\"video__content__video-info__img\" />\n                        <div className=\"video__content__video-info__text\">\n                            <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                            <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                        </div>\n                    </div >\n                );\n            }\n        });\n        const mediasName = this.state.medias.map((item, i) => {\n            if (item.verified_by_admin) {\n                return (\n                    <option style={{ color: 'green' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            } else {\n                return (\n                    <option style={{ color: 'red' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            }\n        });\n        return (\n            <div className=\"admin-video\">\n                <div className=\"admin-video__content\">\n                    <button onClick={this.refresh}>Actualiser</button>\n                    <h2 className=\"admin-video__content__title\">Ajouter un film</h2>\n                    <form className=\"admin-video__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Choisir le média\n                            </label>\n                            <select name=\"medias\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectedMedia} value={this.state.selectedMedia}>\n                                {mediasName}\n                            </select>\n                        </div>\n                        <div className=\"admin-video__content__form__input-search\">\n                            <input type=\"text\" className=\"admin-video__content__form__input-search__input\" id=\"InputId\" value={this.state.filmTitle} placeholder=\"Nom du film\" onChange={this.handleFilmTitleChange} />\n                        </div>\n\n                        <div className=\"admin-video__content__form__submit\">\n                            <button className=\"admin-video__content__form__submit__button\" onClick={this.searchOnTmdb}>\n                                Rechercher\n                            </button>\n                        </div>\n                    </form>\n                    {this.state.showResults\n                        ? <div className=\"admin-video__content__search-results\">\n                            {searchResults}\n                            {this.state.searchStatusMessageError &&\n                                <p style={{ color: 'red' }}>Aucun résultat pour cette recherche</p>\n                            }\n                        </div>\n\n                        : <div className=\"admin-video__content__selected-film\">\n                            {this.state.selectedFilm &&\n                                <div>\n                                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(this.state.selectedFilm)}>\n                                        <img src={this.state.selectedFilm.poster_path} alt=\"film-photo\" className=\"video__content__video-info__img\" />\n                                        <div className=\"video__content__video-info__text\">\n                                            <span className=\"video__content__video-info__text__title\">{this.state.selectedFilm.title}</span>\n                                            <p className=\"video__content__video-info__text__overview\">{this.state.selectedFilm.overview.substr(0, 250)}</p>\n                                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {this.state.selectedFilm.vote_average} / 10</span>\n                                        </div>\n                                    </div >\n                                    <div className=\"admin-video__content__selected-film__player\">\n                                        <iframe\n                                            allowFullScreen=\"alloFullScreen\"\n                                            height=\"315\"\n                                            src={apiUrl + \"video/\" + this.state.selectedMedia}\n                                            width=\"100%\"\n                                            content-type=\"video/mkv\"\n                                        ></iframe>\n                                    </div>\n                                    <div className=\"admin-video__content__form__submit\">\n                                        <button className=\"admin-video__content__form__submit__button\" onClick={this.validSelectedFilm}>\n                                            Valider ce film\n                                        </button>\n                                    </div>\n                                    <div className=\"admin-video__content__message-status\">\n                                        {this.state.statusMessage &&\n                                            <p style={{ color: this.state.statusMessageColor }}>{this.state.statusMessage}</p>\n                                        }\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    }\n\n\n                </div>\n\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            password: '',\n            role: 1,\n            validId: null,\n            validPassword: null,\n            connexionError: false,\n            users: [],\n            selectUserToDelete: undefined,\n            userDeleteMessage: false,\n            userDeleteColor: undefined\n        };\n    }\n\n    componentDidMount() {\n        this.getUsers();\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleIdChange = (e) => {\n        let idTarget = e.target.value;\n        this.setState({ id: idTarget });\n    }\n\n    handlePasswordChange = (e) => {\n        let passwordTarget = e.target.value;\n        this.setState({ password: passwordTarget });\n    }\n\n    handleRoleChange = (e) => {\n        let roleTarget = e.target.value;\n        this.setState({ role: roleTarget });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(this.state.id + '  ' + this.state.password + '  ' + this.state.role)\n        axios.post(apiUrl + 'register', {\n            identifiant: this.state.id,\n            password: this.state.password,\n            role: this.state.role\n        })\n            .then(response => {\n                console.log(response)\n                this.getUsers();\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ connexionError: true });\n            });\n    }\n\n    getUsers = () => {\n        axios.get(apiUrl + 'get-all-users'\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ users: response.data });\n            })\n            .catch(error => {\n            });\n    }\n\n    selectUserToDelete = (event) => {\n        this.setState({ selectUserToDelete: event.target.value });\n    }\n\n    handleSubmitDeleteUser = (event) => {\n        event.preventDefault();\n        axios.delete(apiUrl + 'delete/' + this.state.selectUserToDelete)\n            .then(response => {\n                console.log(response)\n                this.setState({ userDeleteMessage: response.data, userDeleteColor: 'green' });\n                this.getUsers();\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ userDeleteMessage: 'Une erreur est arrivée', userDeleteColor: 'red' });\n            });\n    }\n\n    render() {\n        const usersName = this.state.users.map((item, i) => {\n            return (\n                <option value={item.name} key={i}>{item.name}</option>\n            );\n        });\n        return (\n            <div className=\"connexion\">\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Ajouter utilisateur</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <input type=\"text\" className=\"\" id=\"InputId\" value={this.state.id} onChange={this.handleIdChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Mot de Passe\n                            </label>\n                            <input type=\"text\" className=\"\" id=\"InputPassword\" value={this.state.password} onChange={this.handlePasswordChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Role\n                            </label>\n                            <input type=\"number\" className=\"\" id=\"InputPassword\" value={this.state.role} onChange={this.handleRoleChange} />\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"btn btn-primary\" onClick={this.handleSubmit}>\n                                Valider\n                            </button>\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.connexionError &&\n                                <p>Identifiants invalides, veuillez réessayer</p>\n                            }\n                        </div>\n                    </form>\n                </div>\n                <hr />\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Supprimer utilisateur</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <select name=\"users\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectUserToDelete} value={this.state.selectUserToDelete}>\n                                {usersName}\n                            </select>\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"btn btn-primary\" onClick={this.handleSubmitDeleteUser}>\n                                Valider\n                            </button>\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.userDeleteMessage &&\n                                <p style={{ color: this.state.userDeleteColor }}>{this.state.userDeleteMessage}</p>\n                            }\n                        </div>\n                    </form>\n                </div>\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Home from '../Home';\nimport Music from '../Music';\nimport Video from '../Video';\nimport VideoDetail from '../VideoDetail';\nimport ServerIsDown from '../ServerIsDown';\nimport App from '../App';\nimport Authentificator from \"../Authentificator\";\nimport Administration from \"../Administration\";\nimport VideoAdmin from '../VideoAdmin';\nimport Users from '../Users';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    componentDidMount() {\n\n        this.getServerStatus();\n    }\n\n    componentDidUpdate() {\n    }\n\n    getServerStatus = () => {\n        console.log('ici')\n        axios.get(apiUrl + 'start'\n        )\n            .then(response => {\n                const action = { type: \"SERVER_IS_START\", value: true }\n                this.props.dispatch(action)\n            })\n            .catch(error => {\n                const action = { type: \"SERVER_IS_START\", value: false }\n                this.props.dispatch(action)\n            });\n\n    }\n\n    render() {\n        let render;\n        console.log(this.props.isConnect)\n        if (!this.props.serverIsDown) {\n            render = <ServerIsDown />\n        } else if (!this.props.isConnect) {\n            render = <Authentificator />\n        } else {\n            render =\n                <Switch>\n                    <Route path=\"/admin/videos\">\n                        <VideoAdmin />\n                    </Route>\n                    <Route path=\"/admin/users\">\n                        <Users />\n                    </Route>\n                    <Route path=\"/admin\">\n                        <Administration />\n                    </Route>\n                    <Route path=\"/video-detail\" component={App}>\n                        <VideoDetail />\n                    </Route>\n                    <Route path=\"/video\">\n                        <Video />\n                    </Route>\n                    <Route path=\"/music\">\n                        <Music />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n        }\n        return (\n            <div className=\"navigation\">\n                <Router>\n                    <div className=\"navigation__header\">\n                        <Link className=\"navigation__header__title\" to=\"/\">\n                            <h1>SITH</h1>\n                            <span>By Jellfedora</span>\n                        </Link>\n                    </div>\n                    {render}\n\n                </Router >\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        serverIsDown: state.server.isStart,\n        isConnect: state.user.isConnect,\n        userRole: state.user.role,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);\n\n","import React from 'react';\n// Import Redux Store\nimport { Provider } from \"react-redux\";\nimport store from '../../store';\n// Import Sass\nimport \"../../styles/index.scss\";\n// Import Components\nimport Navigation from \"../Navigation\";\n\n// Fontawesome 5\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPlay, faStop, faFastForward, faFastBackward, faPause, faChevronLeft, faRetweet, faRandom, faForward, faBackward } from '@fortawesome/free-solid-svg-icons';\nimport { faChromecast } from '@fortawesome/free-brands-svg-icons'; //For brand icons\nlibrary.add(faPlay, faStop, faFastForward, faFastBackward, faPause, faChevronLeft, faRetweet, faRandom, faForward, faBackward, faChromecast);\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <Navigation />\n        </Provider>\n    );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}