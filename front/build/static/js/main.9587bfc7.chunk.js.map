{"version":3,"sources":["store/reducer/server-reducer.js","store/reducer/user-reducer.js","store/reducer/index.js","store/index.js","components/Home/index.jsx","components/Music/index.jsx","components/Video/index.jsx","components/VideoDetail/index.jsx","components/ServerIsDown/index.jsx","components/Authentificator/index.jsx","components/Administration/index.jsx","components/VideoAdmin/index.jsx","components/Users/index.jsx","components/Navigation/index.jsx","components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","isStart","serverReducer","state","action","type","value","isConnect","identifiant","role","userReducer","rootReducer","combineReducers","server","user","store","createStore","Home","props","levelAccess","this","userRole","className","to","Component","connect","dispatch","apiUrl","process","audio","Music","activeRandomSong","randomSong","setState","reloadSong","reloadAlbum","activeReloadSong","activeReloadAlbum","playNextSong","currentTime","play","max","Math","floor","listOfSongs","length","randomIndexSong","random","getStream","indexOfActualSong","indexOf","songTitle","nextSongName","getAllFolders","axios","get","then","response","console","log","listOfFolders","data","catch","error","getAllSongs","repertorySongs","repertoryImg","changePlayerState","playerStatus","pause","fastBackward","fastForward","songIsCharged","duration","source","showMusicFolder","openFolder","isFirstSongOfAlbulm","getAlbumImg","prevProps","prevState","onended","responseType","base64","btoa","Uint8Array","reduce","byte","String","fromCharCode","selectedTrack","Audio","ontimeupdate","getCurrentTime","selectedFolder","time","isNaN","slice","getDuration","map","item","i","key","onClick","icon","disabled","backward","size","forward","Video","getVideos","loadVideosSpinner","listOfVideos","titleOfVideos","test","filmDetail","push","title","toLowerCase","handleSearchFilmChange","e","idTarget","target","searchFilm","result","Fuse","includeScore","keys","search","searchVideoResults","searchActive","deleteSearch","searchInlistOfVideos","src","poster_path","alt","overview","substr","vote_average","searchVideos","spin","id","onChange","placeholder","VideoDetail","getVideoInfo","filmTitle","media_name","release_date","selectVideo","videoIsPlay","location","pathname","split","allowFullScreen","height","width","content-type","withRouter","ServerIsDown","getServerStatus","setTimeout","Authentificator","handleIdChange","handlePasswordChange","passwordTarget","password","handleSubmit","event","preventDefault","startSpinner","post","connexionError","validId","validPassword","passwordHidden","htmlFor","Administration","selectPage","refresh","getMedia","medias","verified_by_admin","selectedMedia","handleFilmTitleChange","filmTitleTarget","searchOnTmdb","searchResults","showResults","statusMessage","url","results","searchStatusMessageError","selectedFilm","validSelectedFilm","film","statusMessageColor","undefined","mediasName","style","color","name","Users","handleRoleChange","roleTarget","getUsers","users","selectUserToDelete","handleSubmitDeleteUser","delete","userDeleteMessage","userDeleteColor","usersName","Navigation","render","serverIsDown","path","VideoAdmin","component","App","library","add","faPlay","faStop","faFastForward","faFastBackward","faPause","faChevronLeft","faRetweet","faRandom","faForward","faBackward","faChromecast","faEye","faEyeSlash","faSpinner","faTimesCircle","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9587bfc7.chunk.js","sourcesContent":["const initialState = {\n    isStart: false,\n}\n\nfunction serverReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'SERVER_IS_START':\n            nextState = {\n                ...state,\n                isStart: action.value\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default serverReducer","const initialState = {\n    isConnect: false,\n    identifiant: null,\n    role: null\n}\n\nfunction userReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'SAVE_USER':\n            nextState = {\n                ...state,\n                isConnect: true,\n                identifiant: action.value.identifiant,\n                role: action.value.role\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default userReducer","import { combineReducers } from 'redux';\nimport server from './server-reducer';\nimport user from './user-reducer';\n\nconst rootReducer = combineReducers({\n    server,\n    user\n});\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './reducer';\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Link\n} from \"react-router-dom\";\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    render() {\n        let levelAccess;\n        if (this.props.userRole === 3) {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span>Musiques</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span>Todo Galerie</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/admin\">\n                        <span>Administration</span>\n                    </Link>\n                </div>\n        } else if (this.props.userRole === 2) {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span>Musiques</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span>Todo Galerie</span>\n                    </Link>\n                </div>\n        }\n        else {\n            levelAccess = \"\"\n        }\n        return (\n            <div className=\"home\">\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/video\">\n                        <span>Vidéos</span>\n                    </Link>\n                    {levelAccess}\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        userRole: state.user.role,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\n// import defaultCover from '../../ressources/images/default-cover.jpg';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nlet audio = null;\n\nclass Music extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedTrack: null,\n            listOfSongs: [],\n            playerStatus: \"stopped\",\n            songIsCharged: false,\n            currentTime: \"0:00\",\n            duration: \"0:00\",\n            songTitle: '',\n            source: null,\n            showMusicFolder: true,\n            listOfFolders: [],\n            openFolder: null,\n            reloadAlbum: false,\n            reloadSong: false,\n            randomSong: false,\n            isFirstSongOfAlbulm: false\n        };\n    }\n    componentDidMount() {\n        // Get all music folders\n        this.getAllFolders();\n        // Get the image album\n        this.getAlbumImg()\n        // Get all songs list\n        // this.getAllSongs();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        // TODO gérer le passage à la chanson suivante en fin de la précédente\n        if (this.state.songIsCharged) {\n            audio.onended = () => {\n                this.playNextSong();\n            }\n        }\n    }\n\n    // TODO Gérer le retour sur la home quand une musique est jouée (musique continue mais controle broken)\n\n    activeRandomSong = () => {\n        if (this.state.randomSong) {\n            this.setState({ randomSong: false });\n        } else {\n            this.setState({ randomSong: true, reloadSong: false, reloadAlbum: false });\n        }\n    }\n\n    activeReloadSong = () => {\n        if (this.state.reloadSong) {\n            this.setState({ reloadSong: false });\n        } else {\n            this.setState({ reloadSong: true, reloadAlbum: false, randomSong: false });\n        }\n    }\n\n    activeReloadAlbum = () => {\n        if (this.state.reloadAlbum) {\n            this.setState({ reloadAlbum: false });\n        } else {\n            this.setState({ reloadAlbum: true, reloadSong: false, randomSong: false });\n        }\n    }\n\n    playNextSong = () => {\n        // Si le reload de la chanson en cours est activé\n        if (this.state.reloadSong) {\n            // On remet le compteur à zéro\n            audio.currentTime = 0\n            audio.play()\n        } else if (this.state.randomSong) {\n            var max = Math.floor(this.state.listOfSongs.length - 1);\n            var randomIndexSong = Math.floor(Math.random() * (max - 0)) + 0;\n            this.getStream(this.state.listOfSongs[randomIndexSong]);\n        } else {\n            // Récupérer lindex de la chanson actuelle dans listOfSongs\n            var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n            var nextSongName = this.state.listOfSongs[indexOfActualSong + 1];\n\n            // Stopper si c'est la derniére chanson de la liste\n            var countOfIndex = this.state.listOfSongs.length - 1;\n            if (indexOfActualSong + 1 <= countOfIndex) {\n                // Envoyer la chanson suivante\n                this.getStream(nextSongName);\n            }\n            // Todo revenir à la premiére chanson si activé\n            else if (this.state.reloadAlbum) {\n                // On envoie le titre de la premiére chanson de l'album\n                this.getStream(this.state.listOfSongs[0]);\n            }\n        }\n\n    }\n\n    // Get album Img^^\n    getAlbumImg() {\n        axios.get(\n            apiUrl + 'img/',\n            { responseType: 'arraybuffer' },\n        )\n            .then(response => {\n                const base64 = btoa(\n                    new Uint8Array(response.data).reduce(\n                        (data, byte) => data + String.fromCharCode(byte),\n                        '',\n                    ),\n                );\n                this.setState({ source: \"data:;base64,\" + base64 });\n            });\n    }\n\n    getStream(selectedTrack) {\n        if (this.state.songIsCharged) {\n            audio.pause() //Stop the former song\n        }\n\n        this.setState({ songIsCharged: true, songTitle: selectedTrack, playerStatus: 'playing' });\n\n        audio = new Audio(apiUrl + 'play/' + this.state.openFolder + '/' + selectedTrack);\n        audio.play();\n        audio.ontimeupdate = () => {\n            this.getCurrentTime()\n        }\n\n    }\n\n    openFolder(selectedFolder) {\n        axios.get(apiUrl + 'get-folder-songs/' + selectedFolder\n        )\n            .then(response => {\n                console.log(response.data)\n                this.setState({\n                    listOfSongs: response.data.repertorySongs,\n                    repertoryImg: response.data.repertoryImg,\n                    showMusicFolder: false,\n                    openFolder: selectedFolder\n                })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    getAllFolders = () => {\n        axios.get(apiUrl + 'music/folder'\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ listOfFolders: response.data })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    getAllSongs = () => {\n        axios.get(apiUrl + 'get-all-songs/'\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ listOfSongs: response.data.repertorySongs, repertoryImg: response.data.repertoryImg })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    // Play / Pause \n    changePlayerState = () => {\n        if (this.state.playerStatus === \"paused\") {\n            audio.play();\n            this.setState({ playerStatus: 'playing' })\n        } else {\n            audio.pause();\n            this.setState({ playerStatus: 'paused' })\n        }\n    }\n\n    backward() {\n        audio.currentTime = audio.currentTime - 10;\n    }\n\n    forward() {\n        audio.currentTime = audio.currentTime + 10;\n    }\n\n    fastBackward = () => {\n        // Récupérer lindex de la chanson actuelle dans listOfSongs\n        var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n        var nextSongName = this.state.listOfSongs[indexOfActualSong - 1];\n\n        // Stopper si c'est la derniére chanson de la liste\n        if (indexOfActualSong - 1 >= 0) {\n            // Envoyer la chanson suivante\n            this.getStream(nextSongName);\n        }\n    }\n\n    fastForward = () => {\n        // Récupérer lindex de la chanson actuelle dans listOfSongs\n        var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n        var nextSongName = this.state.listOfSongs[indexOfActualSong + 1];\n\n        // Stopper si c'est la derniére chanson de la liste\n        var countOfIndex = this.state.listOfSongs.length - 1;\n        if (indexOfActualSong + 1 <= countOfIndex) {\n            // Envoyer la chanson suivante\n            this.getStream(nextSongName);\n        }\n        // Todo revenir à la premiére chanson si activé\n        else {\n            // On envoie le titre de la premiére chanson de l'album\n            this.getStream(this.state.listOfSongs[0]);\n        }\n    }\n\n    // OKK\n    getTime(time) {\n        if (!isNaN(time)) {\n            return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2)\n        }\n    }\n\n    // OKK\n    getCurrentTime() {\n        if (this.state.songIsCharged === true) {\n            var currentTime = Math.floor(audio.currentTime / 60) + ':' + ('0' + Math.floor(audio.currentTime % 60)).slice(-2)\n            this.setState({ currentTime: currentTime })\n\n\n\n            // TODO A deplacer\n            // Définit si c'est la premiére chanson de la liste\n            if (this.state.listOfSongs.indexOf(this.state.songTitle) === 0) {\n                this.setState({ isFirstSongOfAlbulm: true });\n            } else {\n                this.setState({ isFirstSongOfAlbulm: false });\n            }\n        }\n    }\n\n    // OKK\n    getDuration() {\n        if (this.state.songIsCharged === true) {\n            let duration = Math.floor(audio.duration / 60) + ':' + ('0' + Math.floor(audio.duration % 60)).slice(-2);\n            if (isNaN(audio.duration)) {\n                return \"\"\n            } else {\n                return duration;\n            }\n        }\n    }\n\n    render() {\n        const openFolder = this.state.openFolder;\n        const songTitle = this.state.songTitle;\n        // const songImg = this.state.source;\n        const currentTime = this.state.currentTime;\n        const duration = this.getDuration();\n        const listOfFolders = this.state.listOfFolders.map((item, i) => {\n            return (\n                <div\n                    className=\"music__folder__folder-title\"\n                    key={i}\n                    onClick={() => this.openFolder(item)}>\n                    <span>{item}</span>\n                </div>\n            );\n        });\n        const listOfSongs = this.state.listOfSongs.map((item, i) => {\n            return (\n                <div\n                    className=\"music__list__song-title\"\n                    key={i}\n                    onClick={() => this.getStream(item)}\n                >\n                    <span>{item}</span>\n\n                </div>\n            )\n        });\n\n        return (\n            <div className=\"music\">\n                {this.state.showMusicFolder ? (\n                    <div className=\"music__folder\">\n                        {/* TODO Ajouter titre */}\n                        {listOfFolders}\n                    </div>\n                ) : (\n                        <div className=\"music__list\">\n                            {/* TODO Ajouter titre */}\n                            {listOfSongs}\n                        </div>\n                    )}\n                <div className=\"music__player\">\n                    <div className=\"music__player__song-information\">\n                        <div className=\"music__player__song-information__content\">\n                            <span className=\"music__player__song-information__content__song-title\">{songTitle}</span>\n                            <span className=\"music__player__song-information__content__album-title\">{openFolder}</span>\n                        </div>\n                    </div>\n                    <div className=\"music__player__timer\">\n                        {this.state.playerStatus === \"playing\" || this.state.playerStatus === \"paused\" ? (\n                            <div className=\"music__player__timer__currentime\">\n                                <span>\n                                    {currentTime} / {duration}\n                                </span>\n                            </div>\n                        ) : (\n                                <div className=\"music__player__timer__currentime\">\n                                    <span>\n                                        0:00 / 0:00\n                                </span>\n                                </div>\n                            )}\n                        <div className=\"music__player__timer__song-options\">\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.randomSong ? 'isCheck' : '')} onClick={this.activeRandomSong}>\n                                <FontAwesomeIcon\n                                    icon=\"random\"\n                                />\n                            </button>\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.reloadSong ? 'isCheck' : '')} onClick={this.activeReloadSong}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__timer__song-options__reload-button__reload-song-span\">1</span>\n                            </button>\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.reloadAlbum ? 'isCheck' : '')} onClick={this.activeReloadAlbum}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__timer__song-options__reload-button__reload-song-span\">all</span>\n                            </button>\n                            <button className={\"music__player__timer__song-options__cast-button \"} onClick={() => this.setState({ showMusicFolder: true })}>\n                                <FontAwesomeIcon\n                                    icon={['fab', 'chromecast']}\n                                />\n                            </button>\n                        </div>\n                    </div>\n\n\n                    <div className=\"music__player__control\">\n                        <div className=\"music__player__control__buttons\">\n                            {this.state.isFirstSongOfAlbulm\n                                ? <button disabled className=\"music__player__control__buttons__button music__player__control__button__back isDisabled\" onClick={this.fastBackward}>\n                                    <FontAwesomeIcon\n                                        icon=\"fast-backward\"\n                                    />\n                                </button>\n                                : <button className=\"music__player__control__buttons__button music__player__control__button__back\" onClick={this.fastBackward}>\n                                    <FontAwesomeIcon\n                                        icon=\"fast-backward\"\n                                    />\n                                </button>\n                            }\n                            <button className=\"music__player__control__buttons__button music__player__control__button__back\" onClick={this.backward}>\n                                <FontAwesomeIcon\n                                    icon=\"backward\"\n                                />\n                            </button>\n                            {this.state.playerStatus === \"stopped\" || this.state.playerStatus === \"paused\"\n                                ? <button className=\"music__player__control__buttons__button\" onClick={this.changePlayerState}>\n                                    <FontAwesomeIcon\n                                        icon=\"play\"\n                                        size=\"1x\"\n                                    />\n                                </button>\n                                : <button className=\"music__player__control__buttons__button\" onClick={this.changePlayerState}>\n                                    <FontAwesomeIcon\n                                        icon=\"pause\"\n                                        size=\"1x\"\n                                    />\n                                </button>\n                            }\n\n                            <button className=\"music__player__control__buttons__button music__player__control__button__next\" onClick={this.forward}>\n                                <FontAwesomeIcon\n                                    icon=\"forward\"\n                                />\n                            </button>\n                            <button className=\"music__player__control__buttons__button music__player__control__button__next\" onClick={this.fastForward}>\n                                <FontAwesomeIcon\n                                    icon=\"fast-forward\"\n                                />\n                            </button>\n                            {/* <button className=\"music__player__control__button\" onClick={() => this.setState({ playerStatus: \"stopped\" })}>\n                            <FontAwesomeIcon\n                                icon=\"stop\"\n                            />\n                        </button> */}\n                        </div>\n\n                        {/* <div className=\"music__player__control__song-options\">\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.randomSong ? 'isCheck' : '')} onClick={this.activeRandomSong}>\n                                <FontAwesomeIcon\n                                    icon=\"random\"\n                                />\n                            </button>\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.reloadSong ? 'isCheck' : '')} onClick={this.activeReloadSong}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__control__song-options__reload-button__reload-song-span\">1</span>\n                            </button>\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.reloadAlbum ? 'isCheck' : '')} onClick={this.activeReloadAlbum}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__control__song-options__reload-button__reload-song-span\">all</span>\n                            </button>\n                        </div> */}\n\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isStart: state.home.isStart,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Music);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport Fuse from 'fuse.js'\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\n\nclass Video extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listOfVideos: [],\n            searchInlistOfVideos: [],\n            titleOfVideos: [],\n            searchVideoResults: [],\n            searchActive: false,\n            loadVideosSpinner: false\n        };\n    }\n\n    componentDidMount() {\n        // Get all videos\n        this.getVideos();\n\n    }\n\n    componentDidUpdate() {\n    }\n\n    getVideos = () => {\n        this.setState({ loadVideosSpinner: true })\n        axios.get(apiUrl + 'all-films'\n        )\n            .then(response => {\n                let listOfVideos = this.state.listOfVideos\n\n\n                let titleOfVideos = this.state.titleOfVideos\n                let test = []\n                response.data.map((item, i) => {\n                    console.log(item)\n                    let filmDetail = item;\n                    listOfVideos.push(filmDetail);\n\n                    test = {\n                        'key': item.title.toLowerCase(),\n                        'value': item.title,\n                    }\n\n\n                    titleOfVideos.push(test);\n\n                    this.setState({ listOfVideos: listOfVideos, titleOfVideos: titleOfVideos, loadVideosSpinner: false })\n                    // return true;\n                })\n                // this.triArray()\n            })\n            .catch(error => {\n                this.setState({ loadVideosSpinner: false })\n            });\n    }\n\n    handleSearchFilmChange = (e) => {\n        let idTarget = e.target.value;\n        this.setState({ searchFilm: idTarget });\n\n\n        if (idTarget.length > 0) {\n            const options = {\n                includeScore: true,\n                keys: ['title']\n            }\n            const fuse = new Fuse(this.state.listOfVideos, options)\n            const result = fuse.search(idTarget)\n            this.setState({ searchVideoResults: result, searchActive: true })\n\n        } else {\n            this.setState({ searchActive: false })\n        }\n\n    }\n\n    deleteSearch = () => {\n        this.setState({ searchVideoResults: [], searchActive: false, searchFilm: '' })\n    }\n\n    render() {\n        const listOfVideos = this.state.listOfVideos.map((item, i) => {\n            return (\n                <Link className=\"video__content__video-info\" to={'/video-detail/' + item.title} key={i}>\n                    < img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                    <div className=\"video__content__video-info__text\">\n                        <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                        <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                        <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                    </div>\n                </Link >\n            );\n        });\n        const searchVideos = this.state.searchVideoResults.map((item, i) => {\n            return (\n                <Link className=\"video__content__video-info\" to={'/video-detail/' + item.item.title} key={i}>\n                    < img src={item.item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                    <div className=\"video__content__video-info__text\">\n                        <span className=\"video__content__video-info__text__title\">{item.item.title}</span>\n                        <p className=\"video__content__video-info__text__overview\">{item.item.overview.substr(0, 250)}</p>\n                        <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.item.vote_average} / 10</span>\n                    </div>\n                </Link >\n            );\n        });\n\n        return (\n            <div className=\"video\" >\n                {this.state.loadVideosSpinner\n                    ?\n                    <div className=\"video__loader\">\n                        <FontAwesomeIcon\n                            icon=\"spinner\"\n                            spin\n                            size=\"2x\"\n                        />\n                    </div>\n                    :\n                    <div className=\"video__content\">\n                        {this.state.searchActive\n                            ?\n                            <div className=\"video__content__display\">\n                                {searchVideos}\n                            </div>\n                            :\n                            <div className=\"video__content__display\">\n                                {listOfVideos}\n                            </div>\n                        }\n                    </div>\n\n                }\n\n\n                <div className=\"video__searchbar\">\n                    <div className='video__searchbar__opacity'>\n                    </div>\n                    <div className='video__searchbar__content'>\n                        <input type=\"text\" id=\"InputId\" value={this.state.searchFilm} onChange={this.handleSearchFilmChange} placeholder=\"Rechercher\" />\n                        <button className='video__searchbar__content__delete' onClick={this.deleteSearch}>\n                            <FontAwesomeIcon\n                                icon=\"times-circle\"\n                                size=\"1x\"\n                            />\n                        </button>\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass VideoDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectVideo: null,\n            videoIsPlay: false\n        };\n    }\n\n    componentDidMount() {\n        const filmTitle = this.props.location.pathname.split('/')[2]\n        this.getVideoInfo(filmTitle);\n\n    }\n    componentDidUpdate() {\n        console.log(this.state.selectVideo)\n    }\n\n    getVideoInfo = (filmTitle) => {\n        // axios.get(url\n        // )\n        //     .then(response => {\n        //         let filmDetail = {\n        //             'title': filmTitle,\n        //             'overview': response.data.results[0].overview,\n        //             'poster_path': \"https://image.tmdb.org/t/p/w300\" + response.data.results[0].poster_path,\n        //             'vote_average': response.data.results[0].vote_average,\n        //         }\n        //         // selectVideo.push(filmDetail)\n        //         this.setState({ selectVideo: filmDetail })\n        //         console.log(this.state.selectVideo)\n        //     })\n        //     .catch(error => {\n        //         // this.setState({ loadSpinner: false });\n        //     });\n        axios.get(apiUrl + 'one-film/' + filmTitle\n        )\n            .then(response => {\n                let filmDetail = {\n                    'title': response.data.title,\n                    'overview': response.data.overview,\n                    'poster_path': response.data.poster_path,\n                    'vote_average': response.data.vote_average,\n                    'media_name': response.data.media_name,\n                    'release_date': response.data.release_date\n                }\n                // selectVideo.push(filmDetail)\n                this.setState({ selectVideo: filmDetail })\n                console.log(this.state.selectVideo)\n            })\n            .catch(error => {\n            });\n    }\n\n\n    render() {\n        const item = this.state.selectVideo;\n\n        return (\n            <div className=\"video-detail\">\n                {item &&\n                    <div className=\"video-detail__content\">\n                        <img src={item.poster_path} alt=\"film-poster\" className=\"video-detail__content__img\" />\n                        <div className=\"video-detail__content__text\">\n                            <h2 className=\"video-detail__content__text__title\">{item.title}</h2>\n                            <p className=\"video-detail__content__text__overview\">{item.overview}</p>\n                            <span className=\"video-detail__content__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                            <span className=\"video-detail__content__text__vote\">Sortie: {item.release_date} / 10</span>\n                        </div>\n                        <div className=\"video-detail__player\">\n\n                            {!this.state.videoIsPlay &&\n                                <button onClick={() => this.setState({ videoIsPlay: true })}>\n                                    Regarder\n                                </button>\n                            }\n                            {this.state.videoIsPlay &&\n                                <iframe\n                                    title=\"video-player\"\n                                    allowFullScreen=\"alloFullScreen\"\n                                    height=\"315\"\n                                    src={apiUrl + \"video/\" + item.media_name}\n                                    width=\"100%\"\n                                    content-type=\"video/mkv\"\n                                ></iframe>\n                            }\n                        </div>\n                    </div >\n                }\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isStart: state.home.isStart,\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(VideoDetail));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass ServerIsDown extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ServerIsDown: false\n        };\n    }\n\n    componentDidMount() {\n        this.getServerStatus();\n    }\n\n    componentDidUpdate() {\n        console.log('navigation')\n        // this.getServerStatus();\n    }\n\n    getServerStatus = () => {\n        setTimeout(() => {\n            axios.get(apiUrl + 'start'\n            )\n                .then(response => {\n                    const action = { type: \"SERVER_IS_START\", value: true }\n                    this.props.dispatch(action)\n                    this.getServerStatus()\n                })\n                .catch(error => {\n                    const action = { type: \"SERVER_IS_START\", value: false }\n                    this.props.dispatch(action)\n                    this.getServerStatus()\n                });\n        }, 3000);\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"server-down\">\n                <div className=\"server-down__content\">\n                    <h2 className=\"server-down__content__title\">Le serveur est actuellement en maintenance</h2>\n                    <p className=\"server-down__content__message\">Veuillez contacter l'administrateur du site ou réessayer plus tard</p>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isStart: state.home.isStart,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ServerIsDown);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Authentificator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            password: '',\n            validId: null,\n            validPassword: null,\n            connexionError: false,\n            passwordHidden: true,\n            startSpinner: false\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleIdChange = (e) => {\n        let idTarget = e.target.value;\n        this.setState({ id: idTarget });\n    }\n\n    handlePasswordChange = (e) => {\n        let passwordTarget = e.target.value;\n        this.setState({ password: passwordTarget });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.setState({ startSpinner: true });\n        axios.post(apiUrl + 'login', {\n            identifiant: this.state.id,\n            password: this.state.password\n        })\n            .then(response => {\n                console.log(response)\n                const action = { type: \"SAVE_USER\", value: response.data }\n                this.props.dispatch(action)\n                this.setState({ startSpinner: false });\n                // this.setState({ loadSpinner: false, redirectToAccount: true });\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ connexionError: true, startSpinner: false });\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"connexion\">\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Connexion requise pour accéder à nos différents services</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <input type=\"text\" id=\"InputId\" value={this.state.id} onChange={this.handleIdChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Mot de Passe\n                            </label>\n                            <div className=\"connexion__content__form__formgroup__password__content\">\n                                <input type={this.state.passwordHidden ? \"password\" : \"text\"} className=\"\" value={this.state.password} onChange={this.handlePasswordChange} />\n                                {this.state.passwordHidden\n                                    ?\n                                    <span className=\"connexion__content__form__formgroup__password__content__toggle\" onClick={() => this.setState({ passwordHidden: false })}><FontAwesomeIcon icon=\"eye\" size=\"1x\" /></span>\n                                    :\n                                    <span className=\"connexion__content__form__formgroup__password__content__toggle\" onClick={() => this.setState({ passwordHidden: true })}><FontAwesomeIcon icon=\"eye-slash\" size=\"1x\" /></span>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"connexion__content__form__submit__button\" onClick={this.handleSubmit}>\n                                {!this.state.startSpinner\n                                    ? <span>\n                                        Connexion\n                                    </span>\n\n                                    : <FontAwesomeIcon\n                                        icon=\"spinner\"\n                                        spin\n                                        size=\"1x\"\n                                    />\n                                }\n                            </button>\n\n\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.connexionError &&\n                                <p>Identifiants invalides, veuillez réessayer</p>\n                            }\n                        </div>\n                    </form>\n                    <p className=\"connexion__content__message\">Si vous avez perdu votre identifiant ou votre mot de passe. Contacter l'administrateur, aucun mot de passe ou identifiant ne sera envoyé par courriel</p>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Authentificator);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nclass Administration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectPage: 0,\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    // handleIdChange = (e) => {\n    //     let idTarget = e.target.value;\n    //     this.setState({ id: idTarget });\n    // }\n\n    render() {\n        return (\n            <div className=\"admin\">\n                <Link className=\"admin__link\" to=\"/admin/users\">\n                    <span>Gestion Utilisateurs</span>\n                </Link>\n                <Link className=\"admin__link\" to=\"/admin/videos\">\n                    <span>Gestion Vidéos</span>\n                </Link>\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\nconst API_TOKEN = process.env.REACT_APP_TMDB_API_TOKEN;\n\nclass Administration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filmTitle: '',\n            searchResults: [],\n            selectedFilm: undefined,\n            showResults: true,\n            medias: [],\n            selectedMedia: undefined,\n            statusMessage: false,\n            statusMessageColor: undefined,\n            searchStatusMessageError: false\n        };\n    }\n\n    componentDidMount() {\n        this.getMedia();\n    }\n\n    componentDidUpdate() {\n    }\n\n    refresh = (event) => {\n        axios.get(apiUrl + 'check-films'\n        )\n            .then(response => {\n                console.log(response)\n                this.getMedia()\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    getMedia = () => {\n        this.setState({ medias: [] })\n        axios.get(apiUrl + 'admin-all-films'\n        )\n            .then(response => {\n                response.data.map((item, i) => {\n                    let filmDetail = {\n                        'media_name': item.media_name,\n                        'verified_by_admin': item.verified_by_admin\n                    }\n\n                    let medias = this.state.medias;\n                    medias.push(filmDetail)\n                    this.setState({ medias: medias, selectedMedia: response.data[0].media_name })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    selectedMedia = (event) => {\n        this.setState({ selectedMedia: event.target.value, filmTitle: event.target.value });\n    }\n\n    handleFilmTitleChange = (e) => {\n        let filmTitleTarget = e.target.value;\n        this.setState({ filmTitle: filmTitleTarget });\n    }\n\n    searchOnTmdb = (event) => {\n        event.preventDefault();\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], showResults: true, statusMessage: false })\n        const filmTitle = this.state.filmTitle;\n        const url = 'https://api.themoviedb.org/3/search/movie?api_key=' + API_TOKEN + '&language=fr&query=' + filmTitle\n        axios.get(url\n        )\n            .then(response => {\n                // console.log(response)\n                response.data.results.map((item, i) => {\n                    let filmDetail = {\n                        'index': i,\n                        'title': item.title,\n                        'overview': item.overview,\n                        'poster_path': \"https://image.tmdb.org/t/p/w300\" + item.poster_path,\n                        'vote_average': item.vote_average,\n                        'release_date': item.release_date,\n                    }\n\n                    let searchResults = this.state.searchResults\n\n                    searchResults.push(filmDetail)\n                    this.setState({ searchResults: searchResults, searchStatusMessageError: false })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ searchStatusMessageError: true })\n            });\n    }\n\n    selectedFilm = (item) => {\n        console.log(item.overview)\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], selectedFilm: item, showResults: false })\n    }\n\n    validSelectedFilm = (event) => {\n        const selectedFilm = this.state.selectedFilm;\n        const selectedMedia = this.state.selectedMedia;\n        // On envoie les resultats au back\n        event.preventDefault();\n        console.log(selectedMedia)\n        axios.post(apiUrl + 'add-film', {\n            film: selectedFilm,\n            media_name: selectedMedia\n        })\n            .then(response => {\n                this.setState({ statusMessage: 'Film enregistré', statusMessageColor: 'green' });\n            })\n            .catch(error => {\n                this.setState({ statusMessage: 'Une erreur est arrivée', statusMessageColor: 'red' });\n            });\n        this.getMedia();\n    }\n\n    render() {\n        const searchResults = this.state.searchResults.map((item, i) => {\n            if ((item.poster_path !== 'https://image.tmdb.org/t/p/w300null')) {\n                return (\n                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(item)} key={i}>\n                        <img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                        <div className=\"video__content__video-info__text\">\n                            <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                            <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                        </div>\n                    </div >\n                );\n            } else {\n                return false\n            }\n        });\n        const mediasName = this.state.medias.map((item, i) => {\n            if (item.verified_by_admin) {\n                return (\n                    <option style={{ color: 'green' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            } else {\n                return (\n                    <option style={{ color: 'red' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            }\n        });\n        return (\n            <div className=\"admin-video\">\n                <div className=\"admin-video__content\">\n                    <button onClick={this.refresh}>Actualiser</button>\n                    <h2 className=\"admin-video__content__title\">Ajouter un film</h2>\n                    <form className=\"admin-video__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Choisir le média\n                            </label>\n                            <select name=\"medias\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectedMedia} value={this.state.selectedMedia}>\n                                {mediasName}\n                            </select>\n                        </div>\n                        <div className=\"admin-video__content__form__input-search\">\n                            <input type=\"text\" className=\"admin-video__content__form__input-search__input\" id=\"InputId\" value={this.state.filmTitle} placeholder=\"Nom du film\" onChange={this.handleFilmTitleChange} />\n                        </div>\n\n                        <div className=\"admin-video__content__form__submit\">\n                            <button className=\"admin-video__content__form__submit__button\" onClick={this.searchOnTmdb}>\n                                Rechercher\n                            </button>\n                        </div>\n                    </form>\n                    {this.state.showResults\n                        ? <div className=\"admin-video__content__search-results\">\n                            {searchResults}\n                            {this.state.searchStatusMessageError &&\n                                <p style={{ color: 'red' }}>Aucun résultat pour cette recherche</p>\n                            }\n                        </div>\n\n                        : <div className=\"admin-video__content__selected-film\">\n                            {this.state.selectedFilm &&\n                                <div>\n                                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(this.state.selectedFilm)}>\n                                        <img src={this.state.selectedFilm.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                                        <div className=\"video__content__video-info__text\">\n                                            <span className=\"video__content__video-info__text__title\">{this.state.selectedFilm.title}</span>\n                                            <p className=\"video__content__video-info__text__overview\">{this.state.selectedFilm.overview.substr(0, 250)}</p>\n                                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {this.state.selectedFilm.vote_average} / 10</span>\n                                        </div>\n                                    </div >\n                                    <div className=\"admin-video__content__selected-film__player\">\n                                        <iframe\n                                            title=\"video-player\"\n                                            allowFullScreen=\"alloFullScreen\"\n                                            height=\"315\"\n                                            src={apiUrl + \"video/\" + this.state.selectedMedia}\n                                            width=\"100%\"\n                                            content-type=\"video/mkv\"\n                                        ></iframe>\n                                    </div>\n                                    <div className=\"admin-video__content__form__submit\">\n                                        <button className=\"admin-video__content__form__submit__button\" onClick={this.validSelectedFilm}>\n                                            Valider ce film\n                                        </button>\n                                    </div>\n                                    <div className=\"admin-video__content__message-status\">\n                                        {this.state.statusMessage &&\n                                            <p style={{ color: this.state.statusMessageColor }}>{this.state.statusMessage}</p>\n                                        }\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    }\n\n\n                </div>\n\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            password: '',\n            role: 1,\n            validId: null,\n            validPassword: null,\n            connexionError: false,\n            users: [],\n            selectUserToDelete: undefined,\n            userDeleteMessage: false,\n            userDeleteColor: undefined\n        };\n    }\n\n    componentDidMount() {\n        this.getUsers();\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleIdChange = (e) => {\n        let idTarget = e.target.value;\n        this.setState({ id: idTarget });\n    }\n\n    handlePasswordChange = (e) => {\n        let passwordTarget = e.target.value;\n        this.setState({ password: passwordTarget });\n    }\n\n    handleRoleChange = (e) => {\n        let roleTarget = e.target.value;\n        this.setState({ role: roleTarget });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(this.state.id + '  ' + this.state.password + '  ' + this.state.role)\n        axios.post(apiUrl + 'register', {\n            identifiant: this.state.id,\n            password: this.state.password,\n            role: this.state.role\n        })\n            .then(response => {\n                console.log(response)\n                this.getUsers();\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ connexionError: true });\n            });\n    }\n\n    getUsers = () => {\n        axios.get(apiUrl + 'get-all-users'\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ users: response.data });\n            })\n            .catch(error => {\n            });\n    }\n\n    selectUserToDelete = (event) => {\n        this.setState({ selectUserToDelete: event.target.value });\n    }\n\n    handleSubmitDeleteUser = (event) => {\n        event.preventDefault();\n        axios.delete(apiUrl + 'delete/' + this.state.selectUserToDelete)\n            .then(response => {\n                console.log(response)\n                this.setState({ userDeleteMessage: response.data, userDeleteColor: 'green' });\n                this.getUsers();\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ userDeleteMessage: 'Une erreur est arrivée', userDeleteColor: 'red' });\n            });\n    }\n\n    render() {\n        const usersName = this.state.users.map((item, i) => {\n            return (\n                <option value={item.name} key={i}>{item.name}</option>\n            );\n        });\n        return (\n            <div className=\"connexion\">\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Ajouter utilisateur</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <input type=\"text\" className=\"\" id=\"InputId\" value={this.state.id} onChange={this.handleIdChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Mot de Passe\n                            </label>\n                            <input type=\"text\" className=\"\" id=\"InputPassword\" value={this.state.password} onChange={this.handlePasswordChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Role\n                            </label>\n                            <input type=\"number\" className=\"\" id=\"InputPassword\" value={this.state.role} onChange={this.handleRoleChange} />\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"btn btn-primary\" onClick={this.handleSubmit}>\n                                Valider\n                            </button>\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.connexionError &&\n                                <p>Identifiants invalides, veuillez réessayer</p>\n                            }\n                        </div>\n                    </form>\n                </div>\n                <hr />\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Supprimer utilisateur</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <select name=\"users\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectUserToDelete} value={this.state.selectUserToDelete}>\n                                {usersName}\n                            </select>\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"btn btn-primary\" onClick={this.handleSubmitDeleteUser}>\n                                Valider\n                            </button>\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.userDeleteMessage &&\n                                <p style={{ color: this.state.userDeleteColor }}>{this.state.userDeleteMessage}</p>\n                            }\n                        </div>\n                    </form>\n                </div>\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Home from '../Home';\nimport Music from '../Music';\nimport Video from '../Video';\nimport VideoDetail from '../VideoDetail';\nimport ServerIsDown from '../ServerIsDown';\nimport App from '../App';\nimport Authentificator from \"../Authentificator\";\nimport Administration from \"../Administration\";\nimport VideoAdmin from '../VideoAdmin';\nimport Users from '../Users';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    componentDidMount() {\n\n        this.getServerStatus();\n    }\n\n    componentDidUpdate() {\n    }\n\n    getServerStatus = () => {\n        axios.get(apiUrl + 'start'\n        )\n            .then(response => {\n                const action = { type: \"SERVER_IS_START\", value: true }\n                this.props.dispatch(action)\n            })\n            .catch(error => {\n                const action = { type: \"SERVER_IS_START\", value: false }\n                this.props.dispatch(action)\n            });\n\n    }\n\n    render() {\n        let render;\n        if (!this.props.serverIsDown) {\n            render = <ServerIsDown />\n        } else if (!this.props.isConnect) {\n            render = <Authentificator />\n        } else {\n            render =\n                <Switch>\n                    <Route path=\"/admin/videos\">\n                        <VideoAdmin />\n                    </Route>\n                    <Route path=\"/admin/users\">\n                        <Users />\n                    </Route>\n                    <Route path=\"/admin\">\n                        <Administration />\n                    </Route>\n                    <Route path=\"/video-detail\" component={App}>\n                        <VideoDetail />\n                    </Route>\n                    <Route path=\"/video\">\n                        <Video />\n                    </Route>\n                    <Route path=\"/music\">\n                        <Music />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n        }\n        return (\n            <div className=\"navigation\">\n                <Router>\n                    <div className=\"navigation__header\">\n                        <Link className=\"navigation__header__title\" to=\"/\">\n                            <h1>SITH</h1>\n                            <span>By Jellfedora</span>\n                        </Link>\n                    </div>\n                    {render}\n\n                </Router >\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        serverIsDown: state.server.isStart,\n        isConnect: state.user.isConnect,\n        userRole: state.user.role,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);\n\n","import React from 'react';\n// Import Redux Store\nimport { Provider } from \"react-redux\";\nimport store from '../../store';\n// Import Sass\nimport \"../../styles/index.scss\";\n// Import Components\nimport Navigation from \"../Navigation\";\n\n// Fontawesome 5\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPlay, faStop, faFastForward, faFastBackward, faPause, faChevronLeft, faRetweet, faRandom, faForward, faBackward, faEye, faEyeSlash, faSpinner, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faChromecast, } from '@fortawesome/free-brands-svg-icons'; //For brand icons\nlibrary.add(faPlay, faStop, faFastForward, faFastBackward, faPause, faChevronLeft, faRetweet, faRandom, faForward, faBackward, faChromecast, faEye, faEyeSlash, faSpinner, faTimesCircle);\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <Navigation />\n        </Provider>\n    );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}