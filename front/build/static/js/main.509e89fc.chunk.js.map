{"version":3,"sources":["store/reducer/server-reducer.js","store/reducer/user-reducer.js","store/reducer/animations-reducer.js","store/reducer/movie-reducer.js","store/reducer/index.js","store/index.js","containers/Websocket.js","components/Home/index.jsx","components/Music/index.jsx","components/Video/index.jsx","components/VideoPlayer/index.js","components/VideoDetail/index.jsx","components/Authentificator/index.jsx","components/Administration/index.jsx","components/VideoAdmin/index.jsx","components/SeriesAdmin/index.jsx","components/MusicsAdmin/index.jsx","components/Users/index.jsx","components/Series/index.jsx","components/Navigation/index.jsx","components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","isStart","serverReducer","state","action","type","value","isConnect","name","role","token","id","userReducer","console","log","userName","userRole","userToken","loaderStart","animationsReducer","listOfVideos","titleOfVideos","movieReducer","rootReducer","combineReducers","server","user","animations","movie","store","createStore","Websocket","dispatch","useDispatch","socket","require","process","on","message","reason","connect","Home","props","levelAccess","this","className","to","Component","apiUrl","audio","Music","activeRandomSong","randomSong","setState","reloadSong","reloadAlbum","activeReloadSong","activeReloadAlbum","playNextSong","currentTime","play","max","Math","floor","listOfSongs","length","randomIndexSong","random","getStream","indexOfActualSong","indexOf","songTitle","nextSongName","getAllFolders","config","headers","Authorization","axios","get","then","response","listOfFolders","data","catch","error","getAllSongs","repertorySongs","repertoryImg","changePlayerState","playerStatus","pause","fastBackward","fastForward","songIsCharged","duration","source","showMusicFolder","openFolder","isFirstSongOfAlbulm","getAlbumImg","prevProps","prevState","onended","responseType","base64","btoa","Uint8Array","reduce","byte","String","fromCharCode","selectedTrack","Audio","ontimeupdate","getCurrentTime","selectedFolder","time","isNaN","slice","getDuration","map","item","i","key","onClick","icon","size","disabled","backward","forward","scroll","Scroll","Video","getVideos","getLastTen","getCategorys","handleSearchFilmChange","e","scrollToTop","idTarget","target","searchFilm","showCategory","result","Fuse","includeScore","keys","search","searchVideoResults","searchActive","deleteSearch","hideCategory","sort","sortByDate","index","video","push","a","b","Date","created_at","sciFiGenre","forEach","genres_name","includes","fantasyGenre","horrorGenre","searchInlistOfVideos","content","title","src","poster_path","alt","overview","substr","vote_average","style","backgroundImage","getSciFi","getFantasy","getHorror","searchVideos","withoutControls","width","slidesToShow","slidesToScroll","autoComplete","onChange","placeholder","VideoPlayer","componentDidMount","document","getElementById","toggleFullScreen","componentDidUpdate","onplay","isPlay","onpause","componentWillUnmount","pauseVideo","setCookie","convertSeconds","seconds","sec_num","parseInt","hours","minutes","playVideo","refs","vidRef","removeAttribute","load","myVideo","current","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","render","autoPlay","controls","ref","mediaTitle","React","createRef","VideoDetail","getVideoInfo","filmTitle","date","toLocaleDateString","filmDetail","media_name","selectVideo","showVideo","location","pathname","split","release_date","withRouter","Authentificator","handleIdChange","handlePasswordChange","passwordTarget","password","handleSubmit","event","preventDefault","startSpinner","post","identifiant","Cookies","set","expires","tokenNotCookie","getAllFilms","connexionError","toLowerCase","action4","validId","validPassword","passwordHidden","action2","htmlFor","spin","Administration","selectPage","API_TOKEN","refresh","getMedia","medias","verified_by_admin","selectedMedia","handleFilmTitleChange","filmTitleTarget","searchOnTmdb","searchResults","showResults","statusMessage","url","results","genre_ids","searchStatusMessageError","tmdbGenres","genres","selectedFilm","selectedFilmGenres","selectedFilmGenresNames","genre","validSelectedFilm","film","statusMessageColor","onFileChange","selectedFile","files","onFileUpload","formData","FormData","append","fileData","lastModifiedDate","toDateString","undefined","mediasName","color","height","allowFullScreen","content-type","SeriesAdmin","MusicsAdmin","encType","Users","handleRoleChange","roleTarget","getUsers","users","selectUserToDelete","handleSubmitDeleteUser","delete","userDeleteMessage","userDeleteColor","usersName","Series","getSeries","loadVideosSpinner","listOfSeries","serie_name","seasons","Navigation","serverIsDown","path","VideoAdmin","component","App","library","add","faPlay","faStop","faFastForward","faFastBackward","faPause","faChevronLeft","faRetweet","faRandom","faForward","faBackward","faChromecast","faEye","faEyeSlash","faSpinner","faTimesCircle","faCompress","faTv","faUpload","faHome","faArrowLeft","faBorderAll","Boolean","window","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.509e89fc.chunk.js","sourcesContent":["const initialState = {\n    isStart: false,\n}\n\nfunction serverReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'SERVER_IS_START':\n            nextState = {\n                ...state,\n                isStart: action.value\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default serverReducer","const initialState = {\n    isConnect: false,\n    name: null,\n    role: null,\n    token: null,\n    id: null\n}\n\nfunction userReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'SAVE_USER':\n            console.log(action.value)\n            nextState = {\n                ...state,\n                isConnect: true,\n                name: action.value.userName,\n                role: action.value.userRole,\n                token: action.value.userToken\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default userReducer","const initialState = {\n    loaderStart: false,\n}\n\nfunction animationsReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'LOADER_START':\n            nextState = {\n                ...state,\n                loaderStart: action.value\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default animationsReducer","const initialState = {\n    listOfVideos: null,\n    titleOfVideos: null\n}\n\nfunction movieReducer(state = initialState, action) {\n    let nextState\n    switch (action.type) {\n        case 'GET_MOVIES':\n            nextState = {\n                ...state,\n                listOfVideos: action.value.listOfVideos,\n                titleOfVideos: action.value.titleOfVideos\n            }\n            return nextState || state\n        default:\n            return state\n    }\n}\n\nexport default movieReducer","import { combineReducers } from 'redux';\nimport server from './server-reducer';\nimport user from './user-reducer';\nimport animations from './animations-reducer';\nimport movie from './movie-reducer';\n\nconst rootReducer = combineReducers({\n    server,\n    user,\n    animations,\n    movie,\n});\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './reducer';\n\nconst store = createStore(rootReducer);\n\nexport default store;","import { useDispatch } from 'react-redux';\nimport io from 'socket.io-client';\nconst socketAdress = 'http://localhost:3003';\nconst apisocketAdress = process.env.REACT_APP_REST_API_SOCKET_ADRESS;\n\nconst Websocket = () => {\n\n    const dispatch = useDispatch()\n    var socket = require('socket.io-client')(apisocketAdress);\n\n    socket.on('message', function (message) {\n        dispatch({ type: \"LOADER_START\", value: false })\n        dispatch({ type: \"SERVER_IS_START\", value: true })\n    })\n\n    socket.on('disconnect', (reason) => {\n        // console.log(reason);\n        if (reason === 'io server disconnect') {\n            // the disconnection was initiated by the server, you need to reconnect manually\n            socket.connect();\n        }\n        // else the socket will automatically try to reconnect\n\n        dispatch({ type: \"SERVER_IS_START\", value: false })\n    });\n\n    return null\n}\n\nexport default Websocket;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Link\n} from \"react-router-dom\";\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    render() {\n\n\n        let levelAccess;\n        if (this.props.userRole === 3) {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/video\">\n                        <span >Films</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/series\">\n                        <span >Séries</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span >Musiques</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/admin\">\n                        <span >Administration</span>\n                    </Link>\n\n                </div>\n        } else if (this.props.userRole === 2) {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/video\">\n                        <span >Vidéos</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/series\">\n                        <span >Séries</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/music\">\n                        <span >Musiques</span>\n                    </Link>\n                </div>\n        }\n        else {\n            levelAccess =\n                <div className=\"home__links\">\n                    <Link className=\"home__links__link\" to=\"/video\">\n                        <span >Vidéos</span>\n                    </Link>\n                    <Link className=\"home__links__link\" to=\"/series\">\n                        <span >Séries</span>\n                    </Link>\n                </div>\n        }\n        return (\n            <div className=\"home\">\n                <div className=\"home__links\">\n                    {levelAccess}\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        userRole: state.user.role,\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport axios from 'axios';\n// import defaultCover from '../../ressources/images/default-cover.jpg';\nconst apiUrl = process.env.REACT_APP_REST_API;\nlet audio = null;\n\nclass Music extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedTrack: null,\n            listOfSongs: [],\n            playerStatus: \"stopped\",\n            songIsCharged: false,\n            currentTime: \"0:00\",\n            duration: \"0:00\",\n            songTitle: '',\n            source: null,\n            showMusicFolder: true,\n            listOfFolders: [],\n            openFolder: null,\n            reloadAlbum: false,\n            reloadSong: false,\n            randomSong: false,\n            isFirstSongOfAlbulm: false\n        };\n    }\n    componentDidMount() {\n        // Get all music folders\n        this.getAllFolders();\n        // Get the image album\n        this.getAlbumImg()\n        // Get all songs list\n        // this.getAllSongs();\n    }\n    componentDidUpdate(prevProps, prevState) {\n        // TODO gérer le passage à la chanson suivante en fin de la précédente\n        if (this.state.songIsCharged) {\n            audio.onended = () => {\n                this.playNextSong();\n            }\n        }\n    }\n\n    // TODO Gérer le retour sur la home quand une musique est jouée (musique continue mais controle broken)\n\n    activeRandomSong = () => {\n        if (this.state.randomSong) {\n            this.setState({ randomSong: false });\n        } else {\n            this.setState({ randomSong: true, reloadSong: false, reloadAlbum: false });\n        }\n    }\n\n    activeReloadSong = () => {\n        if (this.state.reloadSong) {\n            this.setState({ reloadSong: false });\n        } else {\n            this.setState({ reloadSong: true, reloadAlbum: false, randomSong: false });\n        }\n    }\n\n    activeReloadAlbum = () => {\n        if (this.state.reloadAlbum) {\n            this.setState({ reloadAlbum: false });\n        } else {\n            this.setState({ reloadAlbum: true, reloadSong: false, randomSong: false });\n        }\n    }\n\n    playNextSong = () => {\n        // Si le reload de la chanson en cours est activé\n        if (this.state.reloadSong) {\n            // On remet le compteur à zéro\n            audio.currentTime = 0\n            audio.play()\n        } else if (this.state.randomSong) {\n            var max = Math.floor(this.state.listOfSongs.length - 1);\n            var randomIndexSong = Math.floor(Math.random() * (max - 0)) + 0;\n            this.getStream(this.state.listOfSongs[randomIndexSong]);\n        } else {\n            // Récupérer lindex de la chanson actuelle dans listOfSongs\n            var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n            var nextSongName = this.state.listOfSongs[indexOfActualSong + 1];\n\n            // Stopper si c'est la derniére chanson de la liste\n            var countOfIndex = this.state.listOfSongs.length - 1;\n            if (indexOfActualSong + 1 <= countOfIndex) {\n                // Envoyer la chanson suivante\n                this.getStream(nextSongName);\n            }\n            // Todo revenir à la premiére chanson si activé\n            else if (this.state.reloadAlbum) {\n                // On envoie le titre de la premiére chanson de l'album\n                this.getStream(this.state.listOfSongs[0]);\n            }\n        }\n\n    }\n\n    // Get album Img^^\n    getAlbumImg() {\n        axios.get(\n            apiUrl + 'img/',\n            { responseType: 'arraybuffer' },\n        )\n            .then(response => {\n                const base64 = btoa(\n                    new Uint8Array(response.data).reduce(\n                        (data, byte) => data + String.fromCharCode(byte),\n                        '',\n                    ),\n                );\n                this.setState({ source: \"data:;base64,\" + base64 });\n            });\n    }\n\n    getStream(selectedTrack) {\n        if (this.state.songIsCharged) {\n            audio.pause() //Stop the former song\n        }\n\n        this.setState({ songIsCharged: true, songTitle: selectedTrack, playerStatus: 'playing' });\n\n        audio = new Audio(apiUrl + 'play/' + this.state.openFolder + '/' + selectedTrack);\n        audio.play();\n        audio.ontimeupdate = () => {\n            this.getCurrentTime()\n        }\n\n    }\n\n    openFolder(selectedFolder) {\n        const config = {\n            headers: { Authorization: `Bearer ${this.props.userToken}` }\n        };\n        axios.get(apiUrl + 'get-folder-songs/' + selectedFolder, config\n        )\n            .then(response => {\n                this.setState({\n                    listOfSongs: response.data.repertorySongs,\n                    repertoryImg: response.data.repertoryImg,\n                    showMusicFolder: false,\n                    openFolder: selectedFolder\n                })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    getAllFolders = () => {\n        const config = {\n            headers: { Authorization: `Bearer ${this.props.userToken}` }\n        };\n        axios.get(apiUrl + 'music/folder', config\n        )\n            .then(response => {\n                this.setState({ listOfFolders: response.data })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    getAllSongs = () => {\n        axios.get(apiUrl + 'get-all-songs/'\n        )\n            .then(response => {\n                this.setState({ listOfSongs: response.data.repertorySongs, repertoryImg: response.data.repertoryImg })\n            })\n            .catch(error => {\n                // this.setState({ loadSpinner: false });\n            });\n    }\n\n    // Play / Pause \n    changePlayerState = () => {\n        if (this.state.playerStatus === \"paused\") {\n            audio.play();\n            this.setState({ playerStatus: 'playing' })\n        } else {\n            audio.pause();\n            this.setState({ playerStatus: 'paused' })\n        }\n    }\n\n    backward() {\n        audio.currentTime = audio.currentTime - 10;\n    }\n\n    forward() {\n        audio.currentTime = audio.currentTime + 10;\n    }\n\n    fastBackward = () => {\n        // Récupérer lindex de la chanson actuelle dans listOfSongs\n        var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n        var nextSongName = this.state.listOfSongs[indexOfActualSong - 1];\n\n        // Stopper si c'est la derniére chanson de la liste\n        if (indexOfActualSong - 1 >= 0) {\n            // Envoyer la chanson suivante\n            this.getStream(nextSongName);\n        }\n    }\n\n    fastForward = () => {\n        // Récupérer lindex de la chanson actuelle dans listOfSongs\n        var indexOfActualSong = this.state.listOfSongs.indexOf(this.state.songTitle)\n\n        var nextSongName = this.state.listOfSongs[indexOfActualSong + 1];\n\n        // Stopper si c'est la derniére chanson de la liste\n        var countOfIndex = this.state.listOfSongs.length - 1;\n        if (indexOfActualSong + 1 <= countOfIndex) {\n            // Envoyer la chanson suivante\n            this.getStream(nextSongName);\n        }\n        // Todo revenir à la premiére chanson si activé\n        else {\n            // On envoie le titre de la premiére chanson de l'album\n            this.getStream(this.state.listOfSongs[0]);\n        }\n    }\n\n    // OKK\n    getTime(time) {\n        if (!isNaN(time)) {\n            return Math.floor(time / 60) + ':' + ('0' + Math.floor(time % 60)).slice(-2)\n        }\n    }\n\n    // OKK\n    getCurrentTime() {\n        if (this.state.songIsCharged === true) {\n            var currentTime = Math.floor(audio.currentTime / 60) + ':' + ('0' + Math.floor(audio.currentTime % 60)).slice(-2)\n            this.setState({ currentTime: currentTime })\n\n\n\n            // TODO A deplacer\n            // Définit si c'est la premiére chanson de la liste\n            if (this.state.listOfSongs.indexOf(this.state.songTitle) === 0) {\n                this.setState({ isFirstSongOfAlbulm: true });\n            } else {\n                this.setState({ isFirstSongOfAlbulm: false });\n            }\n        }\n    }\n\n    // OKK\n    getDuration() {\n        if (this.state.songIsCharged === true) {\n            let duration = Math.floor(audio.duration / 60) + ':' + ('0' + Math.floor(audio.duration % 60)).slice(-2);\n            if (isNaN(audio.duration)) {\n                return \"\"\n            } else {\n                return duration;\n            }\n        }\n    }\n\n    render() {\n        const openFolder = this.state.openFolder;\n        const songTitle = this.state.songTitle;\n        // const songImg = this.state.source;\n        const currentTime = this.state.currentTime;\n        const duration = this.getDuration();\n        const listOfFolders = this.state.listOfFolders.map((item, i) => {\n            return (\n                <div\n                    className=\"music__folder__folder-title\"\n                    key={i}\n                    onClick={() => this.openFolder(item)}>\n                    <span>{item}</span>\n                </div>\n            );\n        });\n        const listOfSongs = this.state.listOfSongs.map((item, i) => {\n            return (\n                <div\n                    className=\"music__list__song-title\"\n                    key={i}\n                    onClick={() => this.getStream(item)}\n                >\n                    <span>{item}</span>\n\n                </div>\n            )\n        });\n\n        return (\n            <div className=\"music\">\n                {this.state.showMusicFolder ? (\n                    <div className=\"music__folder\">\n                        {/* TODO Ajouter titre */}\n                        {listOfFolders}\n                    </div>\n                ) : (\n                        <div className=\"music__list\">\n                            <span className=\"video-detail__link-to-home\" onClick={() => this.setState({ showMusicFolder: true })}>\n                                <FontAwesomeIcon\n                                    icon=\"arrow-left\"\n                                    size=\"1x\"\n                                />\n                            </span>\n                            {/* TODO Ajouter titre */}\n                            {listOfSongs}\n                        </div>\n                    )}\n                <div className=\"music__player\">\n                    <div className=\"music__player__song-information\">\n                        <div className=\"music__player__song-information__content\">\n                            <span className=\"music__player__song-information__content__song-title\">{songTitle}</span>\n                            <span className=\"music__player__song-information__content__album-title\">{openFolder}</span>\n                        </div>\n                    </div>\n                    <div className=\"music__player__timer\">\n                        {this.state.playerStatus === \"playing\" || this.state.playerStatus === \"paused\" ? (\n                            <div className=\"music__player__timer__currentime\">\n                                <span>\n                                    {currentTime} / {duration}\n                                </span>\n                            </div>\n                        ) : (\n                                <div className=\"music__player__timer__currentime\">\n                                    <span>\n                                        0:00 / 0:00\n                                </span>\n                                </div>\n                            )}\n                        <div className=\"music__player__timer__song-options\">\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.randomSong ? 'isCheck' : '')} onClick={this.activeRandomSong}>\n                                <FontAwesomeIcon\n                                    icon=\"random\"\n                                />\n                            </button>\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.reloadSong ? 'isCheck' : '')} onClick={this.activeReloadSong}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__timer__song-options__reload-button__reload-song-span\">1</span>\n                            </button>\n                            <button className={\"music__player__timer__song-options__reload-button \" + (this.state.reloadAlbum ? 'isCheck' : '')} onClick={this.activeReloadAlbum}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__timer__song-options__reload-button__reload-song-span\">all</span>\n                            </button>\n                            {/* <button className={\"music__player__timer__song-options__cast-button \"} onClick={() => this.setState({ showMusicFolder: true })}>\n                                <FontAwesomeIcon\n                                    icon={['fab', 'chromecast']}\n                                />\n                            </button> */}\n                        </div>\n                    </div>\n\n\n                    <div className=\"music__player__control\">\n                        <div className=\"music__player__control__buttons\">\n                            {this.state.isFirstSongOfAlbulm\n                                ? <button disabled className=\"music__player__control__buttons__button music__player__control__button__back isDisabled\" onClick={this.fastBackward}>\n                                    <FontAwesomeIcon\n                                        icon=\"fast-backward\"\n                                    />\n                                </button>\n                                : <button className=\"music__player__control__buttons__button music__player__control__button__back\" onClick={this.fastBackward}>\n                                    <FontAwesomeIcon\n                                        icon=\"fast-backward\"\n                                    />\n                                </button>\n                            }\n                            <button className=\"music__player__control__buttons__button music__player__control__button__back\" onClick={this.backward}>\n                                <FontAwesomeIcon\n                                    icon=\"backward\"\n                                />\n                            </button>\n                            {this.state.playerStatus === \"stopped\" || this.state.playerStatus === \"paused\"\n                                ? <button className=\"music__player__control__buttons__button\" onClick={this.changePlayerState}>\n                                    <FontAwesomeIcon\n                                        icon=\"play\"\n                                        size=\"1x\"\n                                    />\n                                </button>\n                                : <button className=\"music__player__control__buttons__button\" onClick={this.changePlayerState}>\n                                    <FontAwesomeIcon\n                                        icon=\"pause\"\n                                        size=\"1x\"\n                                    />\n                                </button>\n                            }\n\n                            <button className=\"music__player__control__buttons__button music__player__control__button__next\" onClick={this.forward}>\n                                <FontAwesomeIcon\n                                    icon=\"forward\"\n                                />\n                            </button>\n                            <button className=\"music__player__control__buttons__button music__player__control__button__next\" onClick={this.fastForward}>\n                                <FontAwesomeIcon\n                                    icon=\"fast-forward\"\n                                />\n                            </button>\n                            {/* <button className=\"music__player__control__button\" onClick={() => this.setState({ playerStatus: \"stopped\" })}>\n                            <FontAwesomeIcon\n                                icon=\"stop\"\n                            />\n                        </button> */}\n                        </div>\n\n                        {/* <div className=\"music__player__control__song-options\">\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.randomSong ? 'isCheck' : '')} onClick={this.activeRandomSong}>\n                                <FontAwesomeIcon\n                                    icon=\"random\"\n                                />\n                            </button>\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.reloadSong ? 'isCheck' : '')} onClick={this.activeReloadSong}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__control__song-options__reload-button__reload-song-span\">1</span>\n                            </button>\n                            <button className={\"music__player__control__song-options__reload-button \" + (this.state.reloadAlbum ? 'isCheck' : '')} onClick={this.activeReloadAlbum}>\n                                <FontAwesomeIcon\n                                    icon=\"retweet\"\n                                />\n                                <span className=\"music__player__control__song-options__reload-button__reload-song-span\">all</span>\n                            </button>\n                        </div> */}\n\n                    </div>\n                </div>\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        userToken: state.user.token\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Music);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport * as Scroll from 'react-scroll';\nimport Fuse from 'fuse.js';\nimport Carousel from 'nuka-carousel';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst apiUrl = process.env.REACT_APP_REST_API;\nlet scroll = Scroll.animateScroll;\n\nclass Video extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchInlistOfVideos: [],\n            searchVideoResults: [],\n            searchActive: false,\n            showCategory: true,\n            getLastTen: [],\n            sciFiGenre: [],\n            fantasyGenre: [],\n            horrorGenre: []\n        };\n    }\n\n    componentDidMount() {\n        // const action = { type: \"LOADER_START\", value: true }\n        // this.props.dispatch(action)\n        // Get all videos\n        if (this.props.listOfVideos) {\n            this.getVideos();\n\n        }\n    }\n\n    componentDidUpdate() {\n    }\n\n\n    getVideos = () => {\n        this.getLastTen();\n        this.getCategorys();\n    }\n\n    handleSearchFilmChange = (e) => {\n        scroll.scrollToTop();\n        let idTarget = e.target.value;\n        this.setState({ searchFilm: idTarget, showCategory: false });\n\n        if (idTarget.length > 0) {\n            const options = {\n                includeScore: true,\n                keys: ['title']\n            }\n            const fuse = new Fuse(this.props.listOfVideos, options)\n            const result = fuse.search(idTarget)\n            this.setState({ searchVideoResults: result, searchActive: true })\n\n        } else {\n            this.setState({ searchActive: false })\n\n        }\n\n    }\n\n    deleteSearch = () => {\n        this.setState({ searchVideoResults: [], searchActive: false, searchFilm: '' })\n    }\n\n    showCategory = () => {\n        this.setState({ showCategory: true, searchFilm: '' })\n    }\n\n    hideCategory = () => {\n        this.setState({ showCategory: false, searchFilm: '' })\n    }\n\n    getLastTen = () => {\n        let listOfVideos = this.props.listOfVideos;\n        console.log(listOfVideos)\n\n        listOfVideos = listOfVideos.sort(this.sortByDate);\n\n        const getLastTen = []\n        for (let index = 0; index < 10; index++) {\n            const video = listOfVideos[index];\n            getLastTen.push(video)\n\n        }\n        this.setState({ getLastTen: getLastTen })\n    }\n\n    sortByDate = (a, b) => {\n        var da = new Date(a.created_at);\n        var db = new Date(b.created_at);\n        return (da > db) ? 1 : -1;\n    }\n\n    getCategorys = () => {\n        let listOfVideos = this.props.listOfVideos;\n\n        let sciFiGenre = [];\n        listOfVideos.forEach((video) => {\n            if (video.genres_name.includes('Science-Fiction')) {\n                sciFiGenre.push(video)\n            }\n        });\n\n        let fantasyGenre = [];\n        listOfVideos.forEach((video) => {\n            if (video.genres_name.includes('Fantastique')) {\n                fantasyGenre.push(video)\n            }\n        });\n\n        let horrorGenre = [];\n        listOfVideos.forEach((video) => {\n            if (video.genres_name.includes('Horreur')) {\n                horrorGenre.push(video)\n            }\n        });\n\n        this.setState({ sciFiGenre: sciFiGenre, fantasyGenre: fantasyGenre, horrorGenre: horrorGenre })\n    }\n\n    render() {\n        if (this.props.listOfVideos === null) {\n            return <Redirect to='/' />;\n        } else {\n            const listOfVideos = this.props.listOfVideos.map((item, i) => {\n                return (\n                    <Link className=\"video__content__video-info\" to={'/video-detail/' + item.title} key={i}>\n                        < img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                        <div className=\"video__content__video-info__text\">\n                            <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                            <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                        </div>\n                    </Link >\n                );\n            });\n\n            const getLastTen = this.state.getLastTen.map((item, i) => {\n                return (\n                    <Link className=\"video__category__container__link\" to={'/video-detail/' + item.title} key={i} style={{ backgroundImage: \"url(\" + item.poster_path + \")\" }}>\n                    </Link >\n                );\n            });\n\n            const getSciFi = this.state.sciFiGenre.map((item, i) => {\n                return (\n                    <Link className=\"video__category__container__link\" to={'/video-detail/' + item.title} key={i} style={{ backgroundImage: \"url(\" + item.poster_path + \")\" }}>\n                    </Link >\n                );\n            });\n\n            const getFantasy = this.state.fantasyGenre.map((item, i) => {\n                return (\n                    <Link className=\"video__category__container__link\" to={'/video-detail/' + item.title} key={i} style={{ backgroundImage: \"url(\" + item.poster_path + \")\" }}>\n                    </Link >\n                );\n            });\n\n            const getHorror = this.state.horrorGenre.map((item, i) => {\n                return (\n                    <Link className=\"video__category__container__link\" to={'/video-detail/' + item.title} key={i} style={{ backgroundImage: \"url(\" + item.poster_path + \")\" }}>\n                    </Link >\n                );\n            });\n\n            const searchVideos = this.state.searchVideoResults.map((item, i) => {\n                return (\n                    <Link className=\"video__content__video-info\" to={'/video-detail/' + item.item.title} key={i}>\n                        < img src={item.item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                        <div className=\"video__content__video-info__text\">\n                            <span className=\"video__content__video-info__text__title\">{item.item.title}</span>\n                            <p className=\"video__content__video-info__text__overview\">{item.item.overview.substr(0, 250)}</p>\n                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.item.vote_average} / 10</span>\n                        </div>\n                    </Link >\n                );\n            });\n\n            let content;\n            if (!this.state.showCategory) {\n                content =\n                    <div className=\"video\">\n                        <div className=\"video__content\">\n                            {this.state.searchActive\n                                ?\n                                <div className=\"video__content__display\">\n                                    {searchVideos}\n                                </div>\n                                :\n                                <div className=\"video__content__display\">\n                                    {listOfVideos}\n                                </div>\n                            }\n                        </div>\n                    </div>\n            } else {\n                content =\n                    <div className=\"video__category\">\n                        <div className=\"video__category__container\">\n                            <h2>Derniers films ajoutés</h2>\n                            <Carousel\n                                withoutControls\n                                width=\"100%\"\n                                slidesToShow={3.5}\n                                slidesToScroll=\"auto\"\n                            >\n                                {getLastTen}\n                            </Carousel>\n                        </div>\n                        <div className=\"video__category__container\">\n                            <h2>Films de Science Fiction</h2>\n                            <Carousel\n                                withoutControls\n                                width=\"100%\"\n                                slidesToShow={3.5}\n                                slidesToScroll=\"auto\"\n                            >\n                                {getSciFi}\n                            </Carousel>\n                        </div>\n                        <div className=\"video__category__container\">\n                            <h2>Films Fantastique</h2>\n                            <Carousel\n                                withoutControls\n                                width=\"100%\"\n                                slidesToShow={3.5}\n                                slidesToScroll=\"auto\"\n                            >\n                                {getFantasy}\n                            </Carousel>\n                        </div>\n                        <div className=\"video__category__container\">\n                            <h2>Films Horreur</h2>\n                            <Carousel\n                                withoutControls\n                                width=\"100%\"\n                                slidesToShow={3.5}\n                                slidesToScroll=\"auto\"\n                            >\n                                {getHorror}\n                            </Carousel>\n                        </div>\n                    </div>\n            }\n\n            return (\n                <div className=\"video\">\n                    {content}\n                    < div className=\"video__searchbar\">\n                        <div className='video__searchbar__opacity'>\n                        </div>\n                        <div className='video__searchbar__content'>\n                            <button className='video__searchbar__content__show-category' onClick={this.showCategory}>\n                                <FontAwesomeIcon\n                                    icon=\"home\"\n                                    size=\"1x\"\n                                />\n                                <small>Catégories</small>\n                            </button>\n                            <div className='video__searchbar__content__input'>\n                                <input type=\"text\" id=\"InputId\" autoComplete=\"off\" value={this.state.searchFilm} onChange={this.handleSearchFilmChange} placeholder=\"Rechercher un film\">\n                                </input>\n\n                                {this.state.searchActive &&\n                                    <button className='video__searchbar__content__input__delete' onClick={this.deleteSearch}>\n                                        <FontAwesomeIcon\n                                            icon=\"times-circle\"\n                                            size=\"1x\"\n                                        />\n                                    </button>\n                                }\n                            </div>\n                            <button className='video__searchbar__content__show-category' onClick={this.hideCategory}>\n                                <FontAwesomeIcon\n                                    icon=\"border-all\"\n                                    size=\"1x\"\n                                />\n                                <small>Tous</small>\n                            </button>\n                        </div>\n                    </div>\n                </div >\n            );\n        }\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state)\n    return {\n        userToken: state.user.token,\n        listOfVideos: state.movie.listOfVideos,\n        titleOfVideos: state.movie.titleOfVideos\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Video);\n\n","import React from \"react\";\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Cookies from 'js-cookie';\nclass VideoPlayer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myVideo = React.createRef();\n        this.state = {\n            video: null,\n            isPlay: true,\n            duration: \"0:00\",\n            currentTime: \"0:00\",\n        };\n    }\n    componentDidMount = () => {\n        this.setState({ video: document.getElementById('video-player') })\n        this.toggleFullScreen()\n    };\n\n    componentDidUpdate = () => {\n        // Event\n        this.state.video.ontimeupdate = () => {\n            this.getCurrentTime()\n            this.getDuration()\n        }\n        this.state.video.onplay = () => {\n            this.setState({ isPlay: true })\n        }\n        this.state.video.onpause = () => {\n            this.setState({ isPlay: false })\n        }\n\n\n        // this.state.video.currentTime = this.state.currentTimeCookie['currentime'];\n    }\n\n    componentWillUnmount = () => {\n        this.pauseVideo();\n    };\n\n\n    setCookie = () => {\n        if (this.state.video) {\n\n        }\n    }\n\n\n\n    getCurrentTime = () => {\n        let currentTime = this.convertSeconds(this.state.video.currentTime)\n        this.setState({ currentTime: currentTime })\n    }\n\n    getDuration() {\n        let duration = this.convertSeconds(this.state.video.duration)\n        this.setState({ duration: duration })\n    }\n\n    convertSeconds = (seconds) => {\n        var sec_num = parseInt(seconds, 10); // don't forget the second param\n        var hours = Math.floor(sec_num / 3600);\n        var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n        var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n        if (hours < 10) { hours = \"0\" + hours; }\n        if (minutes < 10) { minutes = \"0\" + minutes; }\n        if (seconds < 10) { seconds = \"0\" + seconds; }\n        return hours + ':' + minutes + ':' + seconds;\n    }\n\n    playVideo = () => {\n        this.refs.vidRef.play();\n        this.setState({ isPlay: true })\n\n    };\n\n    pauseVideo = () => {\n        if (this.refs.vidRef) {\n            // Pause as well\n            this.refs.vidRef.pause();\n            this.refs.vidRef.removeAttribute('src'); // empty source\n            this.refs.vidRef.load();\n            this.setState({ isPlay: false })\n        }\n    };\n\n    toggleFullScreen = () => {\n        if (this.myVideo.current.requestFullscreen) {\n            this.myVideo.current.requestFullscreen();\n        } else if (this.myVideo.current.msRequestFullscreen) {\n            this.myVideo.current.msRequestFullscreen();\n        } else if (this.myVideo.current.mozRequestFullScreen) {\n            this.myVideo.current.mozRequestFullScreen();\n        } else if (this.myVideo.current.webkitRequestFullscreen) {\n            this.myVideo.current.webkitRequestFullscreen();\n        }\n    };\n\n    render = () => {\n        return (\n            <div className=\"video-player\">\n                <video\n                    id='video-player'\n                    autoPlay\n                    controls\n                    className=\"video-player__screen\"\n                    ref={this.myVideo}\n                    src={this.props.mediaTitle}\n                    type=\"video/mp4\"\n                />\n                {/* <div className=\"video-player__controls\">\n                    {this.state.isPlay\n                        ?\n                        <button onClick={this.pauseVideo} className=\"video-player__controls__buttons\">\n                            <FontAwesomeIcon\n                                icon=\"pause\"\n                                size=\"1x\"\n                            />\n                        </button>\n                        :\n                        <button onClick={this.playVideo} className=\"video-player__controls__buttons\">\n                            <FontAwesomeIcon\n                                icon=\"play\"\n                                size=\"1x\"\n                            />\n                        </button>\n                    }\n\n                    <div className=\"video-player__controls__currentime\">\n                        <span>\n                            {this.state.currentTime} / {this.state.duration}\n                        </span>\n                    </div>\n                    <button onClick={this.toggleFullScreen} className=\"video-player__controls__buttons\">\n                        <FontAwesomeIcon\n                            icon=\"compress\"\n                            size=\"1x\"\n                        />\n                    </button>\n                </div> */}\n\n\n\n            </div>\n        );\n    };\n}\n\nexport default VideoPlayer;\n","import React, { Component, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Link\n} from \"react-router-dom\";\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport VideoPlayer from '../VideoPlayer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst apiUrl = process.env.REACT_APP_REST_API;\nclass VideoDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectVideo: null,\n            showVideo: false\n        };\n    }\n\n    componentDidMount() {\n        const filmTitle = this.props.location.pathname.split('/')[2]\n        this.getVideoInfo(filmTitle);\n    }\n\n    componentDidUpdate() {\n    }\n\n\n\n    getVideoInfo = (filmTitle) => {\n        const config = {\n            headers: { Authorization: `Bearer ${this.props.userToken}` }\n        };\n        axios.get(apiUrl + 'one-film/' + filmTitle, config\n        )\n            .then(response => {\n                let date = new Date;\n                date = date.toLocaleDateString()\n                let filmDetail = {\n                    'title': response.data.title,\n                    'overview': response.data.overview,\n                    'poster_path': response.data.poster_path,\n                    'vote_average': response.data.vote_average,\n                    'media_name': response.data.media_name,\n                    'release_date': date\n                }\n                // selectVideo.push(filmDetail)\n                this.setState({ selectVideo: filmDetail })\n            })\n            .catch(error => {\n            });\n    }\n\n    showVideo = () => {\n        this.setState({ showVideo: true })\n    }\n\n    render() {\n        const item = this.state.selectVideo;\n        return (\n            <div className=\"video-detail\">\n                <Link className=\"video-detail__link-to-home\" to=\"/video\">\n                    <FontAwesomeIcon\n                        icon=\"arrow-left\"\n                        size=\"1x\"\n                    />\n                </Link>\n                {item &&\n                    <div className=\"video-detail__content\">\n                        <div className=\"video-detail__content__poster\">\n                            <img src={item.poster_path} alt=\"film-poster\" className=\"video-detail__content__poster__img\" />\n                            <div className=\"video-detail__content__poster__play\">\n                                <div className=\"video-detail__content__poster__play__background\"></div>\n                                <span className=\"video-detail__content__poster__play__icon\" onClick={this.showVideo}>\n                                    <FontAwesomeIcon\n                                        icon=\"play\"\n                                        size=\"2x\"\n                                    />\n                                </span>\n                            </div>\n                        </div>\n\n                        <div className=\"video-detail__content__text\">\n                            <h2 className=\"video-detail__content__text__title\">{item.title}</h2>\n                            <p className=\"video-detail__content__text__overview\">{item.overview}</p>\n                            <span className=\"video-detail__content__text__vote\"><span>Note Tmdb:</span> {item.vote_average} / 10</span>\n                            <span className=\"video-detail__content__text__release\"><span>Sortie:</span> {item.release_date}</span>\n                        </div>\n                    </div >\n                }\n                {this.state.showVideo &&\n                    <div className=\"video-detail__player\">\n                        <VideoPlayer mediaTitle={apiUrl + \"video/\" + item.media_name} />\n                    </div>\n                }\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        userToken: state.user.token,\n    }\n}\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(VideoDetail));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Authentificator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            password: '',\n            tokenNotCookie: '',\n            validId: null,\n            validPassword: null,\n            connexionError: false,\n            passwordHidden: true,\n            startSpinner: false,\n            name: Cookies.get('name'),\n            role: Cookies.get('role'),\n            token: Cookies.get('token')\n\n        };\n    }\n\n    componentDidMount() {\n\n        // Vérifie si des cookies sont existant\n        if (this.state.name && this.state.role) {\n            const action = { type: \"LOADER_START\", value: true }\n            this.props.dispatch(action)\n\n            let cookie = {\n                'userName': this.state.name,\n                'userRole': parseInt(this.state.role),\n                'userToken': this.state.token\n            }\n\n            const action2 = { type: \"SAVE_USER\", value: cookie }\n            this.props.dispatch(action2)\n\n            this.getAllFilms(this.state.token)\n        }\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleIdChange = (e) => {\n        let idTarget = e.target.value;\n        this.setState({ id: idTarget });\n    }\n\n    handlePasswordChange = (e) => {\n        let passwordTarget = e.target.value;\n        this.setState({ password: passwordTarget });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const action = { type: \"LOADER_START\", value: true }\n        this.props.dispatch(action)\n        this.setState({ startSpinner: true });\n        axios.post(apiUrl + 'login', {\n            identifiant: this.state.id,\n            password: this.state.password\n        })\n            .then(response => {\n                console.log(response)\n                const action = { type: \"SAVE_USER\", value: response.data }\n                Cookies.set('name', response.data.userName, { expires: 30 })\n                Cookies.set('role', parseInt(response.data.userRole), { expires: 30 })\n                Cookies.set('token', response.data.userToken, { expires: 30 })\n                this.props.dispatch(action)\n                this.setState({ startSpinner: false, tokenNotCookie: response.data.userToken });\n                this.getAllFilms(response.data.userToken);\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ connexionError: true, startSpinner: false });\n            });\n    }\n\n    getAllFilms = (token) => {\n        // Get all movies datas\n        console.log(token)\n        const config = {\n            headers: { Authorization: `Bearer ${token}` }\n        };\n        axios.get(apiUrl + 'all-films', config)\n            .then(response => {\n                console.log(response)\n                let listOfVideos = [];\n\n\n                let titleOfVideos = [];\n                let movie = []\n                response.data.map((item, i) => {\n                    let filmDetail = item;\n                    listOfVideos.push(filmDetail);\n\n                    movie = {\n                        'key': item.title.toLowerCase(),\n                        'value': item.title,\n                    }\n                    titleOfVideos.push(movie);\n                })\n                const action4 = { type: \"GET_MOVIES\", value: { listOfVideos, titleOfVideos } }\n                this.props.dispatch(action4)\n\n\n                const action3 = { type: \"LOADER_START\", value: false }\n                this.props.dispatch(action3)\n            })\n            .catch(error => {\n                console.log(error)\n                const action3 = { type: \"LOADER_START\", value: false }\n                this.props.dispatch(action3)\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"connexion\">\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Connexion requise pour accéder à nos différents services</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <input type=\"text\" id=\"InputId\" value={this.state.id} onChange={this.handleIdChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Mot de Passe\n                            </label>\n                            <div className=\"connexion__content__form__formgroup__password__content\">\n                                <input type={this.state.passwordHidden ? \"password\" : \"text\"} className=\"\" value={this.state.password} onChange={this.handlePasswordChange} />\n                                {this.state.passwordHidden\n                                    ?\n                                    <span className=\"connexion__content__form__formgroup__password__content__toggle\" onClick={() => this.setState({ passwordHidden: false })}><FontAwesomeIcon icon=\"eye\" size=\"1x\" /></span>\n                                    :\n                                    <span className=\"connexion__content__form__formgroup__password__content__toggle\" onClick={() => this.setState({ passwordHidden: true })}><FontAwesomeIcon icon=\"eye-slash\" size=\"1x\" /></span>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"connexion__content__form__submit__button\" onClick={this.handleSubmit}>\n                                {!this.state.startSpinner\n                                    ? <span>\n                                        Connexion\n                                    </span>\n\n                                    : <FontAwesomeIcon\n                                        icon=\"spinner\"\n                                        spin\n                                        size=\"1x\"\n                                    />\n                                }\n                            </button>\n\n\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.connexionError &&\n                                <p>Identifiants invalides, veuillez réessayer</p>\n                            }\n                        </div>\n                    </form>\n                    <p className=\"connexion__content__message\">Si vous avez perdu votre identifiant ou votre mot de passe. Contacter l'administrateur, aucun mot de passe ou identifiant ne sera envoyé par courriel</p>\n                </div>\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        token: state.user.token,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Authentificator);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    Link\n} from \"react-router-dom\";\n\nclass Administration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectPage: 0,\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    // handleIdChange = (e) => {\n    //     let idTarget = e.target.value;\n    //     this.setState({ id: idTarget });\n    // }\n\n    render() {\n        return (\n            <div className=\"admin\">\n                <Link className=\"admin__link\" to=\"/admin/users\">\n                    <span>Gestion Utilisateurs</span>\n                </Link>\n                <Link className=\"admin__link\" to=\"/admin/videos\">\n                    <span>Gestion Films</span>\n                </Link>\n                <Link className=\"admin__link\" to=\"/admin/series\">\n                    <span>Gestion Séries</span>\n                </Link>\n                <Link className=\"admin__link\" to=\"/admin/musics\">\n                    <span>Gestion Musiques</span>\n                </Link>\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\nconst API_TOKEN = process.env.REACT_APP_TMDB_API_TOKEN;\n\nclass Administration extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filmTitle: '',\n            searchResults: [],\n            selectedFilm: undefined,\n            showResults: true,\n            medias: [],\n            selectedMedia: undefined,\n            statusMessage: false,\n            statusMessageColor: undefined,\n            searchStatusMessageError: false,\n            tmdbGenres: undefined,\n            selectedFile: null\n        };\n    }\n\n    componentDidMount() {\n        this.getMedia();\n    }\n\n    componentDidUpdate() {\n    }\n\n    refresh = (event) => {\n        const config = {\n            headers: { Authorization: `Bearer ${this.props.userToken}` }\n        };\n        axios.get(apiUrl + 'check-films', config\n        )\n            .then(response => {\n                console.log(response)\n                this.getMedia()\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    getMedia = () => {\n        this.setState({ medias: [] })\n        const config = {\n            headers: { Authorization: `Bearer ${this.props.userToken}` }\n        };\n        axios.get(apiUrl + 'admin-all-films', config\n        )\n            .then(response => {\n                response.data.map((item, i) => {\n                    let filmDetail = {\n                        'media_name': item.media_name,\n                        'verified_by_admin': item.verified_by_admin\n                    }\n\n                    let medias = this.state.medias;\n                    medias.push(filmDetail)\n                    this.setState({ medias: medias, selectedMedia: response.data[0].media_name })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    selectedMedia = (event) => {\n        this.setState({ selectedMedia: event.target.value, filmTitle: event.target.value });\n    }\n\n    handleFilmTitleChange = (e) => {\n        let filmTitleTarget = e.target.value;\n        this.setState({ filmTitle: filmTitleTarget });\n    }\n\n    searchOnTmdb = (event) => {\n        event.preventDefault();\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], showResults: true, statusMessage: false })\n        const filmTitle = this.state.filmTitle;\n        const url = 'https://api.themoviedb.org/3/search/movie?api_key=' + API_TOKEN + '&language=fr&query=' + filmTitle\n        axios.get(url)\n            .then(response => {\n                console.log(response)\n                response.data.results.map((item, i) => {\n                    let filmDetail = {\n                        'index': i,\n                        'genre_ids': item.genre_ids,\n                        'title': item.title,\n                        'overview': item.overview,\n                        'poster_path': \"https://image.tmdb.org/t/p/w300\" + item.poster_path,\n                        'vote_average': item.vote_average,\n                        'release_date': item.release_date,\n                    }\n\n                    let searchResults = this.state.searchResults\n\n                    searchResults.push(filmDetail)\n                    this.setState({ searchResults: searchResults, searchStatusMessageError: false })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ searchStatusMessageError: true })\n            });\n\n        axios.get('https://api.themoviedb.org/3/genre/movie/list?api_key=' + API_TOKEN + '&language=fr')\n            .then(response => {\n                this.setState({ tmdbGenres: response.data.genres })\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    selectedFilm = (item) => {\n        // On récupére les genres du film\n        const selectedFilmGenres = item.genre_ids;\n        const genres = this.state.tmdbGenres;\n        const selectedFilmGenresNames = [];\n        genres.forEach((genre) => {\n            if (selectedFilmGenres.indexOf(genre.id) !== -1) {\n                selectedFilmGenresNames.push(genre.name)\n            }\n        })\n        console.log(item)\n\n        const selectedFilm = {\n            title: item.title,\n            poster_path: item.poster_path,\n            release_date: item.release_date,\n            genres_name: selectedFilmGenresNames,\n            overview: item.overview,\n            vote_average: item.vote_average\n        }\n\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], selectedFilm: selectedFilm, showResults: false })\n    }\n\n    validSelectedFilm = (event) => {\n        const selectedFilm = this.state.selectedFilm;\n        const selectedMedia = this.state.selectedMedia;\n        // On envoie les resultats au back\n        event.preventDefault();\n        console.log(selectedMedia)\n        const headers = {\n            \"Authorization\": `Bearer ${this.props.userToken}`\n        };\n        const data = {\n            film: selectedFilm,\n            media_name: selectedMedia\n        };\n        axios.post(apiUrl + 'add-film', data, { \"headers\": headers })\n            .then(response => {\n                this.setState({ statusMessage: 'Film enregistré', statusMessageColor: 'green' });\n            })\n            .catch(error => {\n                this.setState({ statusMessage: 'Une erreur est arrivée', statusMessageColor: 'red' });\n            });\n        this.getMedia();\n    }\n\n    // Upload\n    // On file select (from the pop up) \n    onFileChange = event => {\n\n        // Update the state \n        this.setState({ selectedFile: event.target.files[0] });\n\n    };\n\n    onFileUpload = () => {\n\n        // Create an object of formData \n        const formData = new FormData();\n\n        // Update the formData object \n        formData.append(\n            \"myFile\",\n            this.state.selectedFile,\n            this.state.selectedFile.name\n        );\n\n\n\n\n        // Details of the uploaded file \n        console.log(this.state.selectedFile);\n\n        const headers = {\n            \"Authorization\": `Bearer ${this.props.userToken}`,\n            \"encType\": \"multipart/form-data\",\n        };\n\n        axios.post(apiUrl + 'upload-film', formData, { \"headers\": headers })\n            .then(response => {\n                console.log(response)\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    };\n\n    fileData = () => {\n\n        if (this.state.selectedFile) {\n\n            return (\n                <div>\n                    <h2>File Details:</h2>\n                    <p>File Name: {this.state.selectedFile.name}</p>\n                    <p>File Type: {this.state.selectedFile.type}</p>\n                    <p>\n                        Last Modified:{\" \"}\n                        {this.state.selectedFile.lastModifiedDate.toDateString()}\n                    </p>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <br />\n                    <h4>Choose before Pressing the Upload button</h4>\n                </div>\n            );\n        }\n    };\n\n    render() {\n        const searchResults = this.state.searchResults.map((item, i) => {\n            if ((item.poster_path !== 'https://image.tmdb.org/t/p/w300null')) {\n                return (\n                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(item)} key={i}>\n                        <img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                        <div className=\"video__content__video-info__text\">\n                            <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                            <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                        </div>\n                    </div >\n                );\n            } else {\n                return false\n            }\n        });\n        const mediasName = this.state.medias.map((item, i) => {\n            if (item.verified_by_admin) {\n                return (\n                    <option style={{ color: 'green' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            } else {\n                return (\n                    <option style={{ color: 'red' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            }\n        });\n        return (\n            <div className=\"admin-video\">\n                <div className=\"admin-video__content\">\n                    <button onClick={this.refresh}>Actualiser</button>\n                    <h2 className=\"admin-video__content__title\">Ajouter un film</h2>\n                    <form className=\"admin-video__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Choisir le média\n                            </label>\n                            <select name=\"medias\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectedMedia} value={this.state.selectedMedia}>\n                                {mediasName}\n                            </select>\n                        </div>\n                        <div className=\"admin-video__content__form__input-search\">\n                            <input autoComplete=\"off\" type=\"text\" className=\"admin-video__content__form__input-search__input\" id=\"InputId\" value={this.state.filmTitle} placeholder=\"Nom du film\" onChange={this.handleFilmTitleChange} />\n                        </div>\n\n                        <div className=\"admin-video__content__form__submit\">\n                            <button className=\"admin-video__content__form__submit__button\" onClick={this.searchOnTmdb}>\n                                Rechercher\n                            </button>\n                        </div>\n                    </form>\n                    {this.state.showResults\n                        ? <div className=\"admin-video__content__search-results\">\n                            {searchResults}\n                            {this.state.searchStatusMessageError &&\n                                <p style={{ color: 'red' }}>Aucun résultat pour cette recherche</p>\n                            }\n                        </div>\n\n                        : <div className=\"admin-video__content__selected-film\">\n                            {this.state.selectedFilm &&\n                                <div>\n                                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(this.state.selectedFilm)}>\n                                        <img src={this.state.selectedFilm.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                                        <div className=\"video__content__video-info__text\">\n                                            <span className=\"video__content__video-info__text__title\">{this.state.selectedFilm.title}</span>\n                                            <p className=\"video__content__video-info__text__overview\">{this.state.selectedFilm.overview.substr(0, 250)}</p>\n                                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {this.state.selectedFilm.vote_average} / 10</span>\n                                        </div>\n                                    </div >\n                                    <div className=\"admin-video__content__selected-film__player\">\n                                        <iframe\n                                            title=\"video-player\"\n                                            allowFullScreen=\"alloFullScreen\"\n                                            height=\"315\"\n                                            src={apiUrl + \"video/\" + this.state.selectedMedia}\n                                            width=\"100%\"\n                                            content-type=\"video/mkv\"\n                                        ></iframe>\n                                    </div>\n                                    <div className=\"admin-video__content__form__submit\">\n                                        <button className=\"admin-video__content__form__submit__button\" onClick={this.validSelectedFilm}>\n                                            Valider ce film\n                                        </button>\n                                    </div>\n                                    <div className=\"admin-video__content__message-status\">\n                                        {this.state.statusMessage &&\n                                            <p style={{ color: this.state.statusMessageColor }}>{this.state.statusMessage}</p>\n                                        }\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    }\n\n\n                </div>\n                <h3>\n                    Upload Film (finira dans le dossier video path)\n                </h3>\n                <div>\n                    <input type=\"file\" onChange={this.onFileChange} />\n                    <button onClick={this.onFileUpload}>\n                        Upload!\n                </button>\n                </div>\n                {this.fileData()}\n\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        userToken: state.user.token\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Administration);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\nconst API_TOKEN = process.env.REACT_APP_TMDB_API_TOKEN;\n\nclass SeriesAdmin extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filmTitle: '',\n            searchResults: [],\n            selectedFilm: undefined,\n            showResults: true,\n            medias: [],\n            selectedMedia: undefined,\n            statusMessage: false,\n            statusMessageColor: undefined,\n            searchStatusMessageError: false\n        };\n    }\n\n    componentDidMount() {\n        // this.getMedia();\n    }\n\n    componentDidUpdate() {\n    }\n\n    refresh = (event) => {\n        axios.get(apiUrl + 'check-series'\n        )\n            .then(response => {\n                console.log(response)\n                this.getMedia()\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    getMedia = () => {\n        this.setState({ medias: [] })\n        axios.get(apiUrl + 'admin-all-films'\n        )\n            .then(response => {\n                response.data.map((item, i) => {\n                    let filmDetail = {\n                        'media_name': item.media_name,\n                        'verified_by_admin': item.verified_by_admin\n                    }\n\n                    let medias = this.state.medias;\n                    medias.push(filmDetail)\n                    this.setState({ medias: medias, selectedMedia: response.data[0].media_name })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    }\n\n    selectedMedia = (event) => {\n        this.setState({ selectedMedia: event.target.value, filmTitle: event.target.value });\n    }\n\n    handleFilmTitleChange = (e) => {\n        let filmTitleTarget = e.target.value;\n        this.setState({ filmTitle: filmTitleTarget });\n    }\n\n    searchOnTmdb = (event) => {\n        event.preventDefault();\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], showResults: true, statusMessage: false })\n        const filmTitle = this.state.filmTitle;\n        const url = 'https://api.themoviedb.org/3/search/movie?api_key=' + API_TOKEN + '&language=fr&query=' + filmTitle\n        axios.get(url\n        )\n            .then(response => {\n                // console.log(response)\n                response.data.results.map((item, i) => {\n                    let filmDetail = {\n                        'index': i,\n                        'title': item.title,\n                        'overview': item.overview,\n                        'poster_path': \"https://image.tmdb.org/t/p/w300\" + item.poster_path,\n                        'vote_average': item.vote_average,\n                        'release_date': item.release_date,\n                    }\n\n                    let searchResults = this.state.searchResults\n\n                    searchResults.push(filmDetail)\n                    this.setState({ searchResults: searchResults, searchStatusMessageError: false })\n                    return true;\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ searchStatusMessageError: true })\n            });\n    }\n\n    selectedFilm = (item) => {\n        console.log(item.overview)\n        // On supprime les précédents résultats\n        this.setState({ searchResults: [], selectedFilm: item, showResults: false })\n    }\n\n    validSelectedFilm = (event) => {\n        const selectedFilm = this.state.selectedFilm;\n        const selectedMedia = this.state.selectedMedia;\n        // On envoie les resultats au back\n        event.preventDefault();\n        console.log(selectedMedia)\n        axios.post(apiUrl + 'add-film', {\n            film: selectedFilm,\n            media_name: selectedMedia\n        })\n            .then(response => {\n                this.setState({ statusMessage: 'Film enregistré', statusMessageColor: 'green' });\n            })\n            .catch(error => {\n                this.setState({ statusMessage: 'Une erreur est arrivée', statusMessageColor: 'red' });\n            });\n        this.getMedia();\n    }\n\n    render() {\n        const searchResults = this.state.searchResults.map((item, i) => {\n            if ((item.poster_path !== 'https://image.tmdb.org/t/p/w300null')) {\n                return (\n                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(item)} key={i}>\n                        <img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                        <div className=\"video__content__video-info__text\">\n                            <span className=\"video__content__video-info__text__title\">{item.title}</span>\n                            <p className=\"video__content__video-info__text__overview\">{item.overview.substr(0, 250)}</p>\n                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {item.vote_average} / 10</span>\n                        </div>\n                    </div >\n                );\n            } else {\n                return false\n            }\n        });\n        const mediasName = this.state.medias.map((item, i) => {\n            if (item.verified_by_admin) {\n                return (\n                    <option style={{ color: 'green' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            } else {\n                return (\n                    <option style={{ color: 'red' }} value={item.media_name} key={i}>{item.media_name}</option>\n                );\n            }\n        });\n        return (\n            <div className=\"admin-video\">\n                <div className=\"admin-video__content\">\n                    <button onClick={this.refresh}>Actualiser</button>\n                    <h2 className=\"admin-video__content__title\">Ajouter un film</h2>\n                    <form className=\"admin-video__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Choisir le média\n                            </label>\n                            <select name=\"medias\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectedMedia} value={this.state.selectedMedia}>\n                                {mediasName}\n                            </select>\n                        </div>\n                        <div className=\"admin-video__content__form__input-search\">\n                            <input type=\"text\" className=\"admin-video__content__form__input-search__input\" id=\"InputId\" value={this.state.filmTitle} placeholder=\"Nom du film\" onChange={this.handleFilmTitleChange} />\n                        </div>\n\n                        <div className=\"admin-video__content__form__submit\">\n                            <button className=\"admin-video__content__form__submit__button\" onClick={this.searchOnTmdb}>\n                                Rechercher\n                            </button>\n                        </div>\n                    </form>\n                    {this.state.showResults\n                        ? <div className=\"admin-video__content__search-results\">\n                            {searchResults}\n                            {this.state.searchStatusMessageError &&\n                                <p style={{ color: 'red' }}>Aucun résultat pour cette recherche</p>\n                            }\n                        </div>\n\n                        : <div className=\"admin-video__content__selected-film\">\n                            {this.state.selectedFilm &&\n                                <div>\n                                    <div className=\"video__content__video-info\" onClick={() => this.selectedFilm(this.state.selectedFilm)}>\n                                        <img src={this.state.selectedFilm.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" />\n                                        <div className=\"video__content__video-info__text\">\n                                            <span className=\"video__content__video-info__text__title\">{this.state.selectedFilm.title}</span>\n                                            <p className=\"video__content__video-info__text__overview\">{this.state.selectedFilm.overview.substr(0, 250)}</p>\n                                            <span className=\"video__content__video-info__text__vote\">Note Tmdb: {this.state.selectedFilm.vote_average} / 10</span>\n                                        </div>\n                                    </div >\n                                    <div className=\"admin-video__content__selected-film__player\">\n                                        <iframe\n                                            title=\"video-player\"\n                                            allowFullScreen=\"alloFullScreen\"\n                                            height=\"315\"\n                                            src={apiUrl + \"video/\" + this.state.selectedMedia}\n                                            width=\"100%\"\n                                            content-type=\"video/mkv\"\n                                        ></iframe>\n                                    </div>\n                                    <div className=\"admin-video__content__form__submit\">\n                                        <button className=\"admin-video__content__form__submit__button\" onClick={this.validSelectedFilm}>\n                                            Valider ce film\n                                        </button>\n                                    </div>\n                                    <div className=\"admin-video__content__message-status\">\n                                        {this.state.statusMessage &&\n                                            <p style={{ color: this.state.statusMessageColor }}>{this.state.statusMessage}</p>\n                                        }\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                    }\n\n\n                </div>\n\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        // isConnect: state.user.isConnect,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(SeriesAdmin);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\nconst API_TOKEN = process.env.REACT_APP_TMDB_API_TOKEN;\n\nclass MusicsAdmin extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFile: null\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate() {\n    }\n\n    // On file select (from the pop up) \n    onFileChange = event => {\n\n        // Update the state \n        this.setState({ selectedFile: event.target.files[0] });\n\n    };\n\n    onFileUpload = () => {\n\n        // Create an object of formData \n        const formData = new FormData();\n\n        // Update the formData object \n        formData.append(\n            \"myFile\",\n            this.state.selectedFile,\n            this.state.selectedFile.name\n        );\n\n\n\n\n        // Details of the uploaded file\n        const headers = {\n            Authorization: `Bearer ${this.props.userToken}`,\n            encType: \"multipart/form-data\",\n        };\n\n        axios.post(apiUrl + 'upload-song', formData, { \"headers\": headers })\n            .then(response => {\n            })\n            .catch(error => {\n                console.log(error)\n            });\n    };\n\n    fileData = () => {\n\n        if (this.state.selectedFile) {\n\n            return (\n                <div>\n                    <h2>File Details:</h2>\n                    <p>File Name: {this.state.selectedFile.name}</p>\n                    <p>File Type: {this.state.selectedFile.type}</p>\n                    <p>\n                        Last Modified:{\" \"}\n                        {this.state.selectedFile.lastModifiedDate.toDateString()}\n                    </p>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <br />\n                    <h4>Choose before Pressing the Upload button</h4>\n                </div>\n            );\n        }\n    };\n\n    render() {\n\n        return (\n            <div className=\"admin-music\">\n                <h2>Musique admin</h2>\n                <h3>\n                    Envoyer une musique (finira dans le dossier Autres)\n                </h3>\n                <div>\n                    <input type=\"file\" onChange={this.onFileChange} />\n                    <button onClick={this.onFileUpload}>\n                        Upload!\n                </button>\n                </div>\n                {this.fileData()}\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        userToken: state.user.token\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(MusicsAdmin);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Users extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            password: '',\n            role: 1,\n            validId: null,\n            validPassword: null,\n            connexionError: false,\n            users: [],\n            selectUserToDelete: undefined,\n            userDeleteMessage: false,\n            userDeleteColor: undefined\n        };\n    }\n\n    componentDidMount() {\n        this.getUsers();\n    }\n\n    componentDidUpdate() {\n    }\n\n    handleIdChange = (e) => {\n        let idTarget = e.target.value;\n        this.setState({ id: idTarget });\n    }\n\n    handlePasswordChange = (e) => {\n        let passwordTarget = e.target.value;\n        this.setState({ password: passwordTarget });\n    }\n\n    handleRoleChange = (e) => {\n        let roleTarget = e.target.value;\n        this.setState({ role: roleTarget });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(this.state.id + '  ' + this.state.password + '  ' + this.state.role)\n        const headers = {\n            \"Authorization\": `Bearer ${this.props.userToken}`\n        };\n        const data = {\n            identifiant: this.state.id,\n            password: this.state.password,\n            role: this.state.role,\n        };\n        axios.post(apiUrl + 'register', data, { \"headers\": headers })\n            .then(response => {\n                console.log(response)\n                this.getUsers();\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ connexionError: true });\n            });\n    }\n\n    getUsers = () => {\n        const config = {\n            headers: { Authorization: `Bearer ${this.props.userToken}` }\n        };\n        axios.get(apiUrl + 'get-all-users', config\n        )\n            .then(response => {\n                console.log(response)\n                this.setState({ users: response.data });\n            })\n            .catch(error => {\n            });\n    }\n\n    selectUserToDelete = (event) => {\n        this.setState({ selectUserToDelete: event.target.value });\n    }\n\n    handleSubmitDeleteUser = (event) => {\n        event.preventDefault();\n        const headers = {\n            \"Authorization\": `Bearer ${this.props.userToken}`\n        };\n        axios.delete(apiUrl + 'delete/' + this.state.selectUserToDelete, { \"headers\": headers })\n            .then(response => {\n                console.log(response)\n                this.setState({ userDeleteMessage: response.data, userDeleteColor: 'green' });\n                this.getUsers();\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ userDeleteMessage: 'Une erreur est arrivée', userDeleteColor: 'red' });\n            });\n    }\n\n    render() {\n        const usersName = this.state.users.map((item, i) => {\n            return (\n                <option value={item.name} key={i}>{item.name}</option>\n            );\n        });\n        return (\n            <div className=\"connexion\">\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Ajouter utilisateur</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <input type=\"text\" className=\"\" id=\"InputId\" value={this.state.id} onChange={this.handleIdChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Mot de Passe\n                            </label>\n                            <input type=\"text\" className=\"\" id=\"InputPassword\" value={this.state.password} onChange={this.handlePasswordChange} />\n                        </div>\n                        <div className=\"connexion__content__form__formgroup__password\">\n                            <label htmlFor=\"exampleInputPassword1\">Role\n                            </label>\n                            <input type=\"number\" className=\"\" id=\"InputPassword\" value={this.state.role} onChange={this.handleRoleChange} />\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"btn btn-primary\" onClick={this.handleSubmit}>\n                                Valider\n                            </button>\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.connexionError &&\n                                <p>Identifiants invalides, veuillez réessayer</p>\n                            }\n                        </div>\n                    </form>\n                </div>\n                <hr />\n                <div className=\"connexion__content\">\n                    <h2 className=\"connexion__content__title\">Supprimer utilisateur</h2>\n                    <form className=\"connexion__content__form\">\n                        <div className=\"connexion__content__form__formgroup__id\">\n                            <label htmlFor=\"exampleInputId\"> Identifiant\n                            </label>\n                            <select name=\"users\"\n                                style={{\n                                    width: '100%',\n                                    height: '2em'\n                                }}\n                                onChange={this.selectUserToDelete} value={this.state.selectUserToDelete}>\n                                {usersName}\n                            </select>\n                        </div>\n                        <div className=\"connexion__content__form__submit\">\n\n                            <button className=\"btn btn-primary\" onClick={this.handleSubmitDeleteUser}>\n                                Valider\n                            </button>\n                        </div>\n                        <div className=\"connexion__content__form__error\">\n                            {this.state.userDeleteMessage &&\n                                <p style={{ color: this.state.userDeleteColor }}>{this.state.userDeleteMessage}</p>\n                            }\n                        </div>\n                    </form>\n                </div>\n            </div >\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n        userToken: state.user.token\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);\n\n","import React, { Component } from 'react';\nimport Fuse from 'fuse.js'\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Series extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadVideosSpinner: false,\n            listOfSeries: []\n        };\n    }\n\n    componentDidMount() {\n        // Get all videos\n        this.getSeries();\n    }\n\n    componentDidUpdate() {\n    }\n\n    getSeries = () => {\n        this.setState({ loadVideosSpinner: true })\n        axios.get(apiUrl + 'check-series'\n        )\n            .then(response => {\n                this.setState({ listOfSeries: response.data })\n            })\n            .catch(error => {\n                this.setState({ loadVideosSpinner: false })\n            });\n    }\n\n    render() {\n        const listOfSeries = this.state.listOfSeries.map((item, i) => {\n            return (\n                <Link className=\"video__content__video-info\" to={'/serie-detail/' + item.serie_name} key={i}>\n                    {/* < img src={item.poster_path} alt=\"film-poster\" className=\"video__content__video-info__img\" /> */}\n                    <div className=\"video__content__video-info__text\">\n                        <span className=\"video__content__video-info__text__title\">{item.serie_name}</span>\n                        <span className=\"video__content__video-info__text__title\">{item.seasons.length} saisons</span>\n                    </div>\n                </Link >\n            );\n        });\n\n        return (\n            <div className=\"video\" >\n                <h2>Series</h2>\n                {listOfSeries}\n            </div >\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Series);\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Websocket from '../../containers/Websocket'\nimport Home from '../Home';\nimport Music from '../Music';\nimport Video from '../Video';\nimport VideoDetail from '../VideoDetail/index.jsx';\nimport App from '../App';\nimport Authentificator from \"../Authentificator\";\nimport Administration from \"../Administration\";\nimport VideoAdmin from '../VideoAdmin';\nimport SeriesAdmin from '../SeriesAdmin';\nimport MusicsAdmin from '../MusicsAdmin';\nimport Users from '../Users';\nimport Series from '../Series';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst apiUrl = process.env.REACT_APP_REST_API;\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    componentDidMount() {\n        const action = { type: \"LOADER_START\", value: true }\n        this.props.dispatch(action)\n    }\n\n    componentDidUpdate() {\n    }\n\n    render() {\n        let render;\n        if (!this.props.serverIsDown) {\n            render =\n                <div className=\"server-down\">\n                    <div className=\"server-down__content\">\n                        <h2 className=\"server-down__content__title\">Le serveur est actuellement en maintenance</h2>\n                        <p className=\"server-down__content__message\">La page sera automatiquement mise à jour une fois la connexion rétablie</p>\n                    </div>\n                </div>\n        } else\n            if (!this.props.isConnect) {\n                render = <Authentificator />\n            } else {\n                render =\n                    <Switch>\n                        <Route path=\"/admin/musics\">\n                            <MusicsAdmin />\n                        </Route>\n                        <Route path=\"/admin/series\">\n                            <SeriesAdmin />\n                        </Route>\n                        <Route path=\"/series\">\n                            <Series />\n                        </Route>\n                        <Route path=\"/admin/videos\">\n                            <VideoAdmin />\n                        </Route>\n                        <Route path=\"/admin/users\">\n                            <Users />\n                        </Route>\n                        <Route path=\"/admin\">\n                            <Administration />\n                        </Route>\n                        <Route path=\"/video-detail\" component={App}>\n                            <VideoDetail />\n                        </Route>\n                        <Route path=\"/video\">\n                            <Video />\n                        </Route>\n                        <Route path=\"/music\">\n                            <Music />\n                        </Route>\n                        <Route path=\"/\">\n                            <Home />\n                        </Route>\n                    </Switch>\n            }\n        return (\n            <div className=\"navigation\">\n                <Websocket />\n                <Router>\n                    <div className=\"navigation__header\">\n                        <Link className=\"navigation__header__title\" to=\"/\">\n                            <h1>SITH</h1>\n                            <span>By Jellfedora</span>\n                        </Link>\n                    </div>\n                    {this.props.loaderStart &&\n                        <div className=\"loader\">\n                            <FontAwesomeIcon\n                                icon=\"spinner\"\n                                spin\n                                size=\"2x\"\n                            />\n                        </div>\n                    }\n                    {render}\n\n                </Router >\n            </div>\n        );\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => { dispatch(action) }\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        serverIsDown: state.server.isStart,\n        isConnect: state.user.isConnect,\n        userRole: state.user.role,\n        loaderStart: state.animations.loaderStart,\n        userToken: state.user.token,\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation);\n\n","import React from 'react';\n// Import Redux Store\nimport { Provider } from \"react-redux\";\nimport store from '../../store';\n// Import Sass\nimport \"../../styles/index.scss\";\n// Import Components\nimport Navigation from \"../Navigation\";\n\n// Fontawesome 5\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPlay, faStop, faFastForward, faFastBackward, faPause, faChevronLeft, faRetweet, faRandom, faForward, faBackward, faEye, faEyeSlash, faSpinner, faTimesCircle, faCompress, faTv, faUpload, faHome, faArrowLeft, faBorderAll } from '@fortawesome/free-solid-svg-icons';\nimport { faChromecast, } from '@fortawesome/free-brands-svg-icons'; //For brand icons\nlibrary.add(faPlay, faStop, faFastForward, faFastBackward, faPause, faChevronLeft, faRetweet, faRandom, faForward, faBackward, faChromecast, faEye, faEyeSlash, faSpinner, faTimesCircle, faCompress, faTv, faUpload, faHome, faArrowLeft, faBorderAll);\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <Navigation />\n        </Provider>\n    );\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}